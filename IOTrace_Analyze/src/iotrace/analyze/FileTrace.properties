ClassNames = Data=iotrace.analyze.Data;Json=iotrace.analyze.Json;IdType=iotrace.analyze.FileTraceId$IdType;IdGroup=iotrace.analyze.FileTraceId$IdGroup;FileTraceId=iotrace.analyze.FileTraceId


getFunctionName = Json.getValue("function_name")
getHostName = Json.getValue("hostname")
getProcessId = Json.getValue("process_id")
getThreadId = Json.getValue("thread_id")
getStartTime = Json.getValue("time_start")
getEndTime = Json.getValue("time_end")
getError = Json.hasValue("return_state", "error")

hasWrapperInfo = Json.containsObject("wrapper")
getWrapperStartTime = Json.getValue("wrapper/time_start")
getWrapperEndTime = Json.getValue("wrapper/time_end")

streamId = Json.getValue("file_type/stream")
descriptorId = Json.getValue("file_type/descriptor")
asyncId = Json.getValue("file_type/async")
mpiFileId = Json.getValue("file_type/mpi_file")
soId = Json.getValue("file_type/dl_handle")

fileName = Json.getValue("function_data/file_name")
descriptorId5 = Json.getValue("function_data/descriptor1")
descriptorId6 = Json.getValue("function_data/descriptor2")

fork = Data.openProcess(getProcessId(), Json.getValue("function_data/pid"))
vfork = Data.openProcess(getProcessId(), Json.getValue("function_data/pid"))
#TODO: exit + fork = same ProcessId for new process/thread? => wrap exit and delete ids
#TODO: clone => with CLONE_FILES set/not set
#TODO: execve => clear descriptors/streams/... ??? (undoing the effect of the CLONE_FILES flag of clone(2))
#                File descriptors that  are  marked  close-on-exec  are  closed
#					=> remove locks ?
#TODO: ftw-function ???

#TODO: readdir + dirfd

getFileId = Data.getFileId(getHostName(), Json.getValue("function_data/id/device_id"), Json.getValue("function_data/id/inode_nr"))

open_std_fd = Data.openTrace(IdType.DESCRIPTOR, descriptorId())
open = Data.openTrace(getFileId(), IdType.DESCRIPTOR, descriptorId(), Json.hasArrayValue("function_data/creation", "tmpfile"), fileName())
open64 = Data.openTrace(getFileId(), IdType.DESCRIPTOR, descriptorId(), Json.hasArrayValue("function_data/creation", "tmpfile"), fileName())
openat = Data.openTrace(getFileId(), IdType.DESCRIPTOR, descriptorId(), Json.hasArrayValue("function_data/creation", "tmpfile"), fileName(), Json.hasValue("function_data/relative_to", "file"), Json.getValue("function_data/file_descriptor"))
creat = Data.openTrace(getFileId(), IdType.DESCRIPTOR, descriptorId(), Json.hasArrayValue("function_data/creation", "tmpfile"), fileName())
creat64 = Data.openTrace(getFileId(), IdType.DESCRIPTOR, descriptorId(), Json.hasArrayValue("function_data/creation", "tmpfile"), fileName())
socket = Data.openTrace(IdType.DESCRIPTOR, descriptorId())
accept = Data.openTrace(IdType.DESCRIPTOR, descriptorId())
accept4 = Data.openTrace(IdType.DESCRIPTOR, descriptorId())
socketpair = Data.openTrace(IdType.DESCRIPTOR, descriptorId5(), IdType.DESCRIPTOR, descriptorId6())
pipe = Data.openTrace(IdType.DESCRIPTOR, descriptorId5(), IdType.DESCRIPTOR, descriptorId6())
pipe2 = Data.openTrace(IdType.DESCRIPTOR, descriptorId5(), IdType.DESCRIPTOR, descriptorId6())
memfd_create = Data.openTrace(IdType.DESCRIPTOR, descriptorId())
epoll_create = Data.openTrace(IdType.DESCRIPTOR, descriptorId())
epoll_create1 = Data.openTrace(IdType.DESCRIPTOR, descriptorId())
mkstemp = Data.openTrace(getFileId(), IdType.DESCRIPTOR, descriptorId(), Json.getFalse(), fileName())
mkostemp = Data.openTrace(getFileId(), IdType.DESCRIPTOR, descriptorId(), Json.getFalse(), fileName())
mkstemps = Data.openTrace(getFileId(), IdType.DESCRIPTOR, descriptorId(), Json.getFalse(), fileName())
mkostemps = Data.openTrace(getFileId(), IdType.DESCRIPTOR, descriptorId(), Json.getFalse(), fileName())
inotify_init = Data.openTrace(IdType.DESCRIPTOR, descriptorId())
inotify_init1 = Data.openTrace(IdType.DESCRIPTOR, descriptorId())
eventfd = Data.openTrace(IdType.DESCRIPTOR, descriptorId())

close = Data.closeTrace(IdType.DESCRIPTOR, descriptorId())

descriptorId4 = Json.getValue("function_data/new_descriptor")

dup = Data.addId(IdType.DESCRIPTOR, descriptorId(), IdType.DESCRIPTOR, descriptorId4())
dup2 = Data.closeTraceAddId(IdType.DESCRIPTOR, descriptorId(), IdType.DESCRIPTOR, descriptorId4())
dup3 = Data.closeTraceAddId(IdType.DESCRIPTOR, descriptorId(), IdType.DESCRIPTOR, descriptorId4())

descriptorId8 = Json.getValue("function_data/descriptor")
sendmsg = Data.sendId(IdType.DESCRIPTOR, descriptorId(), IdType.DESCRIPTOR, descriptorId8())
recvmsg = Data.receiveId(IdType.DESCRIPTOR, descriptorId(), IdType.DESCRIPTOR, descriptorId8())

fcntlCmd = Json.getValue("function_data/cmd")
descriptorId7 = Json.getValue("function_data/cmd_data/new_descriptor")

fcntl = Data.cmd(fcntlCmd())
fcntl_dupfd = Data.addId(IdType.DESCRIPTOR, descriptorId(), IdType.DESCRIPTOR, descriptorId7())
fcntl_dupfd_cloexec = Data.addId(IdType.DESCRIPTOR, descriptorId(), IdType.DESCRIPTOR, descriptorId7())
fcntl_setfd = Data.addEvent(IdType.DESCRIPTOR, descriptorId())
fcntl_getfd = Data.addEvent(IdType.DESCRIPTOR, descriptorId())
fcntl_setfl = Data.addEvent(IdType.DESCRIPTOR, descriptorId())
fcntl_getfl = Data.addEvent(IdType.DESCRIPTOR, descriptorId())
fcntl_setlk = Data.addEvent(IdType.DESCRIPTOR, descriptorId())
fcntl_setlkw = Data.addEvent(IdType.DESCRIPTOR, descriptorId())
fcntl_getlk = Data.addEvent(IdType.DESCRIPTOR, descriptorId())
fcntl_ofd_setlk = Data.addEvent(IdType.DESCRIPTOR, descriptorId())
fcntl_ofd_setlkw = Data.addEvent(IdType.DESCRIPTOR, descriptorId())
fcntl_ofd_getlk = Data.addEvent(IdType.DESCRIPTOR, descriptorId())
fcntl_setown = Data.addEvent(IdType.DESCRIPTOR, descriptorId())
fcntl_getown = Data.addEvent(IdType.DESCRIPTOR, descriptorId())
fcntl_setown_ex = Data.addEvent(IdType.DESCRIPTOR, descriptorId())
fcntl_getown_ex = Data.addEvent(IdType.DESCRIPTOR, descriptorId())
fcntl_setsig = Data.addEvent(IdType.DESCRIPTOR, descriptorId())
fcntl_getsig = Data.addEvent(IdType.DESCRIPTOR, descriptorId())
fcntl_setlease = Data.addEvent(IdType.DESCRIPTOR, descriptorId())
fcntl_getlease = Data.addEvent(IdType.DESCRIPTOR, descriptorId())
fcntl_notify = Data.addEvent(IdType.DESCRIPTOR, descriptorId())
fcntl_setpipe_sz = Data.addEvent(IdType.DESCRIPTOR, descriptorId())
fcntl_getpipe_sz = Data.addEvent(IdType.DESCRIPTOR, descriptorId())
fcntl_add_seals = Data.addEvent(IdType.DESCRIPTOR, descriptorId())
fcntl_get_seals = Data.addEvent(IdType.DESCRIPTOR, descriptorId())
fcntl_set_rw_hint = Data.addEvent(IdType.DESCRIPTOR, descriptorId())
fcntl_get_rw_hint = Data.addEvent(IdType.DESCRIPTOR, descriptorId())
fcntl_set_file_rw_hint = Data.addEvent(IdType.DESCRIPTOR, descriptorId())
fcntl_get_file_rw_hint = Data.addEvent(IdType.DESCRIPTOR, descriptorId())

read = Data.addEvent(IdType.DESCRIPTOR, descriptorId())
pread = Data.addEvent(IdType.DESCRIPTOR, descriptorId())
pread64 = Data.addEvent(IdType.DESCRIPTOR, descriptorId())
write = Data.addEvent(IdType.DESCRIPTOR, descriptorId())
pwrite = Data.addEvent(IdType.DESCRIPTOR, descriptorId())
pwrite64 = Data.addEvent(IdType.DESCRIPTOR, descriptorId())
lseek = Data.addEvent(IdType.DESCRIPTOR, descriptorId())
lseek64 = Data.addEvent(IdType.DESCRIPTOR, descriptorId())
readv = Data.addEvent(IdType.DESCRIPTOR, descriptorId())
writev = Data.addEvent(IdType.DESCRIPTOR, descriptorId())
preadv = Data.addEvent(IdType.DESCRIPTOR, descriptorId())
preadv64 = Data.addEvent(IdType.DESCRIPTOR, descriptorId())
pwritev = Data.addEvent(IdType.DESCRIPTOR, descriptorId())
pwritev64 = Data.addEvent(IdType.DESCRIPTOR, descriptorId())
preadv2 = Data.addEvent(IdType.DESCRIPTOR, descriptorId())
preadv64v2 = Data.addEvent(IdType.DESCRIPTOR, descriptorId())
pwritev2 = Data.addEvent(IdType.DESCRIPTOR, descriptorId())
pwritev64v2 = Data.addEvent(IdType.DESCRIPTOR, descriptorId())
# TODO: copy_file_range new wrapper with only one event
copy_file_range = Data.addEvent(IdType.DESCRIPTOR, descriptorId())

memoryId = Json.getValue("file_type/address")
memoryLength = Json.getValue("file_type/length")
memoryId2 = Json.getValue("function_data/address")
memoryLength2 = Json.getValue("function_data/length")
memoryId3 = Json.getValue("function_data/new_address")
memoryLength3 = Json.getValue("function_data/new_length")
memoryOffset = Json.getValue("function_data/offset")
memoryAnonymous = Json.hasArrayValue("function_data/map_flags", "anonymous")
memoryShared = Json.hasValue("function_data/map_flags", "shared")

mmap = Data.addId(IdType.DESCRIPTOR, descriptorId(), memoryId2(), memoryLength2(), memoryAnonymous(), memoryOffset(), memoryShared())
mmap64 = Data.addId(IdType.DESCRIPTOR, descriptorId(), memoryId2(), memoryLength2(), memoryAnonymous(), memoryOffset(), memoryShared())
munmap = Data.addEvent(memoryId(), memoryLength())
msync = Data.addEvent(memoryId(), memoryLength())
mremap = Data.addId(memoryId(), memoryLength(), memoryId3(), memoryLength3())
madvise = Data.addEvent(memoryId(), memoryLength(), Json.hasValue("function_data/advice", "dontfork"), Json.hasValue("function_data/advice", "dofork"))
posix_madvise = Data.addEvent(memoryId(), memoryLength())

descriptorIds = Json.mergeArrays(Json.mergeArrays(Json.getArrayFromPath("function_data/files_waiting_for_read"), Json.getArrayFromPath("function_data/files_waiting_for_write")), Json.getArrayFromPath("function_data/files_waiting_for_except"))

select = Data.addEvent(IdType.DESCRIPTOR, descriptorIds())

sync = Data.addEvent(IdGroup.HOST)
# TODO: syncfs only one filesystem
syncfs = Data.addEvent(IdGroup.HOST)
fsync = Data.addEvent(IdType.DESCRIPTOR, descriptorId())
fdatasync = Data.addEvent(IdType.DESCRIPTOR, descriptorId())

open_std_file = Data.openTrace(IdType.STREAM, streamId())
fopen = Data.openTrace(getFileId(), IdType.STREAM, streamId(), Json.hasArrayValue("function_data/creation", "tmpfile"), fileName())
fopen64 = Data.openTrace(getFileId(), IdType.STREAM, streamId(), Json.hasArrayValue("function_data/creation", "tmpfile"), fileName())
freopen = Data.closeOldOpenNewTrace(getFileId(), IdType.STREAM, streamId(), Json.hasArrayValue("function_data/creation", "tmpfile"), fileName())
freopen64 = Data.closeOldOpenNewTrace(getFileId(), IdType.STREAM, streamId(), Json.hasArrayValue("function_data/creation", "tmpfile"), fileName())
tmpfile = Data.openTrace(getFileId(), IdType.STREAM, streamId(), Json.getTrue(), "")
tmpfile64 = Data.openTrace(getFileId(), IdType.STREAM, streamId(), Json.getTrue(), "")
popen = Data.openTrace(IdType.STREAM, streamId())

descriptorId2 = Json.getValue("function_data/descriptor")
descriptorId3 = Json.getValue("function_data/file_descriptor")

fdopen = Data.addId(IdType.DESCRIPTOR, descriptorId2(), IdType.STREAM, streamId())
fileno = Data.addId(IdType.STREAM, streamId(), IdType.DESCRIPTOR, descriptorId3(), FileTraceId.isStandardDescriptor(Json.getValue("function_data/file_descriptor")))

fclose = Data.closeTrace(IdType.STREAM, streamId())
fcloseall = Data.closeTrace(IdType.STREAM, IdGroup.PROCESS)

flockfile = Data.addEvent(IdType.STREAM, streamId())
ftrylockfile = Data.addEvent(IdType.STREAM, streamId())
funlockfile = Data.addEvent(IdType.STREAM, streamId())
fwide = Data.addEvent(IdType.STREAM, streamId())
fputc = Data.addEvent(IdType.STREAM, streamId())
fputwc = Data.addEvent(IdType.STREAM, streamId())
fputc_unlocked = Data.addEvent(IdType.STREAM, streamId())
fputwc_unlocked = Data.addEvent(IdType.STREAM, streamId())
putc = Data.addEvent(IdType.STREAM, streamId())
putwc = Data.addEvent(IdType.STREAM, streamId())
putc_unlocked = Data.addEvent(IdType.STREAM, streamId())
putwc_unlocked = Data.addEvent(IdType.STREAM, streamId())
fputs = Data.addEvent(IdType.STREAM, streamId())
fputws = Data.addEvent(IdType.STREAM, streamId())
fputs_unlocked = Data.addEvent(IdType.STREAM, streamId())
fputws_unlocked = Data.addEvent(IdType.STREAM, streamId())
putw = Data.addEvent(IdType.STREAM, streamId())
fgetc = Data.addEvent(IdType.STREAM, streamId())
fgetwc = Data.addEvent(IdType.STREAM, streamId())
fgetc_unlocked = Data.addEvent(IdType.STREAM, streamId())
fgetwc_unlocked = Data.addEvent(IdType.STREAM, streamId())
getc = Data.addEvent(IdType.STREAM, streamId())
getwc = Data.addEvent(IdType.STREAM, streamId())
getc_unlocked = Data.addEvent(IdType.STREAM, streamId())
getwc_unlocked = Data.addEvent(IdType.STREAM, streamId())
getw = Data.addEvent(IdType.STREAM, streamId())
getline = Data.addEvent(IdType.STREAM, streamId())
getdelim = Data.addEvent(IdType.STREAM, streamId())
fgets = Data.addEvent(IdType.STREAM, streamId())
fgetws = Data.addEvent(IdType.STREAM, streamId())
fgets_unlocked = Data.addEvent(IdType.STREAM, streamId())
fgetws_unlocked = Data.addEvent(IdType.STREAM, streamId())
ungetc = Data.addEvent(IdType.STREAM, streamId())
ungetwc = Data.addEvent(IdType.STREAM, streamId())
fread = Data.addEvent(IdType.STREAM, streamId())
fread_unlocked = Data.addEvent(IdType.STREAM, streamId())
fwrite = Data.addEvent(IdType.STREAM, streamId())
fwrite_unlocked = Data.addEvent(IdType.STREAM, streamId())
fprintf = Data.addEvent(IdType.STREAM, streamId())
fwprintf = Data.addEvent(IdType.STREAM, streamId())
vfprintf = Data.addEvent(IdType.STREAM, streamId())
vfwprintf = Data.addEvent(IdType.STREAM, streamId())
fscanf = Data.addEvent(IdType.STREAM, streamId())
fwscanf = Data.addEvent(IdType.STREAM, streamId())
vfscanf = Data.addEvent(IdType.STREAM, streamId())
vfwscanf = Data.addEvent(IdType.STREAM, streamId())
feof = Data.addEvent(IdType.STREAM, streamId())
feof_unlocked = Data.addEvent(IdType.STREAM, streamId())
ferror = Data.addEvent(IdType.STREAM, streamId())
ferror_unlocked = Data.addEvent(IdType.STREAM, streamId())
clearerr = Data.addEvent(IdType.STREAM, streamId())
clearerr_unlocked = Data.addEvent(IdType.STREAM, streamId())
ftell = Data.addEvent(IdType.STREAM, streamId())
ftello = Data.addEvent(IdType.STREAM, streamId())
ftello64 = Data.addEvent(IdType.STREAM, streamId())
fseek = Data.addEvent(IdType.STREAM, streamId())
fseeko = Data.addEvent(IdType.STREAM, streamId())
fseeko64 = Data.addEvent(IdType.STREAM, streamId())
rewind = Data.addEvent(IdType.STREAM, streamId())
fgetpos = Data.addEvent(IdType.STREAM, streamId())
fgetpos64 = Data.addEvent(IdType.STREAM, streamId())
fsetpos = Data.addEvent(IdType.STREAM, streamId())
fsetpos64 = Data.addEvent(IdType.STREAM, streamId())
fflush = Data.addEventForProcess(IdType.STREAM, streamId())
fflush_unlocked = Data.addEventForProcess(IdType.STREAM, streamId())
setvbuf = Data.addEvent(IdType.STREAM, streamId())
setbuf = Data.addEvent(IdType.STREAM, streamId())
setbuffer = Data.addEvent(IdType.STREAM, streamId())
setlinebuf = Data.addEvent(IdType.STREAM, streamId())
__freadable = Data.addEvent(IdType.STREAM, streamId())
__fwritable = Data.addEvent(IdType.STREAM, streamId())
__freading = Data.addEvent(IdType.STREAM, streamId())
__fwriting = Data.addEvent(IdType.STREAM, streamId())
__fsetlocking = Data.addEvent(IdType.STREAM, streamId())
_flushlbf = Data.addEvent(IdType.STREAM, streamId())
__fpurge = Data.addEvent(IdType.STREAM, streamId())
__flbf = Data.addEvent(IdType.STREAM, streamId())
__fbufsize = Data.addEvent(IdType.STREAM, streamId())
__fpending = Data.addEvent(IdType.STREAM, streamId())

soId = Json.getValue("file_type/dl_handle")

dlopen = Data.openTrace(getFileId(), IdType.SO, soId(), Json.getFalse(), fileName())
dlmopen = Data.openTrace(getFileId(), IdType.SO, soId(), Json.getFalse(), fileName())
