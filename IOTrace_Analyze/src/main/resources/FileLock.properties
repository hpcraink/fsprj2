ClassNames = AnalyzeFunctionPool=iotrace.model.evaluation.function.AnalyzeFunctionPool;FunctionEvent=iotrace.model.analysis.FunctionEvent;LockMode=iotrace.model.analysis.file.FileLock$LockMode;LockState=iotrace.model.analysis.trace.id.FileTraceId$LockMode;Json=iotrace.model.logs.Json
#TODO: LockMode necessary?


#stream = Json.getValue("file_type/stream")

#read = FunctionEvent.setLock()
#pread
#pread64
#write
#pwrite
#pwrite64
#lseek
#lseek64
#readv
#writev
#preadv
#preadv64
#pwritev
#pwritev64
#preadv2
#preadv64v2
#pwritev2
#pwritev64v2
#TODO: copy_file_range

#mmap
#mmap64
#munmap
#msync

#select
#sync
#syncfs
#fsync
#fdatasync

lockType = Json.getValue("function_data/cmd_data/type")

fcntl = AnalyzeFunctionPool.cmd("fcntl", Json.getValue("function_data/cmd"))
fcntl_dupfd = FunctionEvent.setThreadLock()
fcntl_dupfd_cloexec = FunctionEvent.setThreadLock()
fcntl_setfd = FunctionEvent.setThreadLock()
fcntl_getfd = FunctionEvent.setThreadLock()
fcntl_setfl = FunctionEvent.setThreadLock()
fcntl_getfl = FunctionEvent.setThreadLock()
#ToDo: setlk, setlkw: acquire or release a lock (trace lock-mode)
#TODO: relative to end of file ??? file size (fstat) ???
fcntl_setlk = AnalyzeFunctionPool.cmd("fcntl_setlk", lockType())
fcntl_setlk_read_lock = FunctionEvent.setThreadLock()
fcntl_setlk_write_lock = FunctionEvent.setThreadLock()
fcntl_setlk_unlock = FunctionEvent.setThreadLock()
fcntl_setlkw = AnalyzeFunctionPool.cmd("fcntl_setlkw", lockType())
fcntl_setlkw_read_lock = FunctionEvent.setThreadLock()
fcntl_setlkw_write_lock = FunctionEvent.setThreadLock()
fcntl_setlkw_unlock = FunctionEvent.setThreadLock()
fcntl_getlk = FunctionEvent.setThreadLock()
#ToDo: ofd_setlk, ofd_setlkw: acquire or release a lock (trace lock-mode)
fcntl_ofd_setlk = AnalyzeFunctionPool.cmd("fcntl_ofd_setlk", lockType())
fcntl_ofd_setlk_read_lock = FunctionEvent.setThreadLock()
fcntl_ofd_setlk_write_lock = FunctionEvent.setThreadLock()
fcntl_ofd_setlk_unlock = FunctionEvent.setThreadLock()
fcntl_ofd_setlkw = AnalyzeFunctionPool.cmd("fcntl_ofd_setlkw", lockType())
fcntl_ofd_setlkw_read_lock = FunctionEvent.setThreadLock()
fcntl_ofd_setlkw_write_lock = FunctionEvent.setThreadLock()
fcntl_ofd_setlkw_unlock = FunctionEvent.setThreadLock()
fcntl_ofd_getlk = FunctionEvent.setThreadLock()
fcntl_setown = FunctionEvent.setThreadLock()
fcntl_getown = FunctionEvent.setThreadLock()
fcntl_setown_ex = FunctionEvent.setThreadLock()
fcntl_getown_ex = FunctionEvent.setThreadLock()
fcntl_setsig = FunctionEvent.setThreadLock()
fcntl_getsig = FunctionEvent.setThreadLock()
fcntl_setlease = FunctionEvent.setThreadLock()
fcntl_getlease = FunctionEvent.setThreadLock()
fcntl_notify = FunctionEvent.setThreadLock()
fcntl_setpipe_sz = FunctionEvent.setThreadLock()
fcntl_getpipe_sz = FunctionEvent.setThreadLock()
fcntl_add_seals = FunctionEvent.setThreadLock()
fcntl_get_seals = FunctionEvent.setThreadLock()
fcntl_set_rw_hint = FunctionEvent.setThreadLock()
fcntl_get_rw_hint = FunctionEvent.setThreadLock()
fcntl_set_file_rw_hint = FunctionEvent.setThreadLock()
fcntl_get_file_rw_hint = FunctionEvent.setThreadLock()
#TODO: remove lock by process termination
#TODO: close of a descriptor for a file removes all locks of this thread

__fsetlocking = AnalyzeFunctionPool.cmd("__fsetlocking", Json.getValue("function_data/set_mode"))
__fsetlocking_internal = FunctionEvent.changeLockState(LockState.INTERNAL)
__fsetlocking_bycaller = FunctionEvent.changeLockState(LockState.BYCALLER)
__fsetlocking_query_lock_mode = FunctionEvent.changeLockState()