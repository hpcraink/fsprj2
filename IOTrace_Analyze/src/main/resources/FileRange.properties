ClassNames = AnalyzeFunctionPool=iotraceanalyze.model.analysis.function.AnalyzeFunctionPool;FunctionEvent=iotraceanalyze.model.analysis.FunctionEvent;RangeType=iotraceanalyze.model.analysis.file.FileRange$RangeType;Json=iotraceanalyze.model.logs.Json


readBytes = Json.getValue("function_data/read_bytes")
writtenBytes = Json.getValue("function_data/written_bytes")
position = Json.getValue("function_data/position")
offset = Json.getValue("function_data/new_offset_relative_to_beginning_of_file")
mmapOffset = Json.getValue("function_data/offset")
mmapLength = Json.getValue("function_data/length")
useFileOffset = Json.hasValue("function_data/offset", "-1")
ungetBytes = Json.getValue("function_data/buffer_bytes")
address = Json.getValue("file_type/address")
length = Json.getValue("file_type/length")

read = FunctionEvent.setRange(RangeType.READ, readBytes())
pread = FunctionEvent.setRange(RangeType.READ, readBytes(), position())
pread64 = FunctionEvent.setRange(RangeType.READ, readBytes(), position())
write = FunctionEvent.setRange(RangeType.WRITE, writtenBytes())
pwrite = FunctionEvent.setRange(RangeType.WRITE, writtenBytes(), position())
pwrite64 = FunctionEvent.setRange(RangeType.WRITE, writtenBytes(), position())
lseek = FunctionEvent.setOffset(offset())
lseek64 = FunctionEvent.setOffset(offset())
readv = FunctionEvent.setRange(RangeType.READ, readBytes())
writev = FunctionEvent.setRange(RangeType.WRITE, writtenBytes())
preadv = FunctionEvent.setRange(RangeType.READ, readBytes(), position())
preadv64 = FunctionEvent.setRange(RangeType.READ, readBytes(), position())
pwritev = FunctionEvent.setRange(RangeType.WRITE, writtenBytes(), position())
pwritev64 = FunctionEvent.setRange(RangeType.WRITE, writtenBytes(), position())
preadv2 = FunctionEvent.setRange(RangeType.READ, readBytes(), position(), useFileOffset())
preadv64v2 = FunctionEvent.setRange(RangeType.READ, readBytes(), position(), useFileOffset())
pwritev2 = FunctionEvent.setRange(RangeType.WRITE, writtenBytes(), position(), useFileOffset())
pwritev64v2 = FunctionEvent.setRange(RangeType.WRITE, writtenBytes(), position(), useFileOffset())
# TODO: copy_file_range new wrapper with only one event
#copy_file_range = Evaluation.addEvent(IdType.DESCRIPTOR, descriptorId())

mmap = FunctionEvent.setRangeCheckError(RangeType.READ, mmapLength(), mmapOffset())
mmap64 = FunctionEvent.setRangeCheckError(RangeType.READ, mmapLength(), mmapOffset())
msync = FunctionEvent.setRangeFromAddress(RangeType.WRITE, length(), address())
munmap = FunctionEvent.setRangeFromAddress(RangeType.WRITE, length(), address())
# TODO: exit of process => like msync/munmap

fputc = FunctionEvent.setRange(RangeType.WRITE, writtenBytes())
fputwc = FunctionEvent.setRange(RangeType.WRITE, writtenBytes())
fputc_unlocked = FunctionEvent.setRange(RangeType.WRITE, writtenBytes())
fputwc_unlocked = FunctionEvent.setRange(RangeType.WRITE, writtenBytes())
putc = FunctionEvent.setRange(RangeType.WRITE, writtenBytes())
putwc = FunctionEvent.setRange(RangeType.WRITE, writtenBytes())
putc_unlocked = FunctionEvent.setRange(RangeType.WRITE, writtenBytes())
putwc_unlocked = FunctionEvent.setRange(RangeType.WRITE, writtenBytes())
fputs = FunctionEvent.setRange(RangeType.WRITE, writtenBytes())
fputws = FunctionEvent.setRange(RangeType.WRITE, writtenBytes())
fputs_unlocked = FunctionEvent.setRange(RangeType.WRITE, writtenBytes())
fputws_unlocked = FunctionEvent.setRange(RangeType.WRITE, writtenBytes())
putw = FunctionEvent.setRange(RangeType.WRITE, writtenBytes())
fgetc = FunctionEvent.setRange(RangeType.READ, readBytes())
fgetwc = FunctionEvent.setRange(RangeType.READ, readBytes())
fgetc_unlocked = FunctionEvent.setRange(RangeType.READ, readBytes())
fgetwc_unlocked = FunctionEvent.setRange(RangeType.READ, readBytes())
getc = FunctionEvent.setRange(RangeType.READ, readBytes())
getwc = FunctionEvent.setRange(RangeType.READ, readBytes())
getc_unlocked = FunctionEvent.setRange(RangeType.READ, readBytes())
getwc_unlocked = FunctionEvent.setRange(RangeType.READ, readBytes())
getw = FunctionEvent.setRange(RangeType.READ, readBytes())
getline = FunctionEvent.setRange(RangeType.READ, readBytes())
getdelim = FunctionEvent.setRange(RangeType.READ, readBytes())
fgets = FunctionEvent.setRange(RangeType.READ, readBytes())
fgetws = FunctionEvent.setRange(RangeType.READ, readBytes())
fgets_unlocked = FunctionEvent.setRange(RangeType.READ, readBytes())
fgetws_unlocked = FunctionEvent.setRange(RangeType.READ, readBytes())
ungetc = FunctionEvent.setUngetOffset(ungetBytes())
ungetwc = FunctionEvent.setUngetOffset(ungetBytes())
fread = FunctionEvent.setRange(RangeType.READ, readBytes())
fread_unlocked = FunctionEvent.setRange(RangeType.READ, readBytes())
fwrite = FunctionEvent.setRange(RangeType.WRITE, writtenBytes())
fwrite_unlocked = FunctionEvent.setRange(RangeType.WRITE, writtenBytes())
fprintf = FunctionEvent.setRange(RangeType.WRITE, writtenBytes())
fwprintf = FunctionEvent.setRange(RangeType.WRITE, writtenBytes())
vfprintf = FunctionEvent.setRange(RangeType.WRITE, writtenBytes())
vfwprintf = FunctionEvent.setRange(RangeType.WRITE, writtenBytes())
#TODO: get offset in scan functions (ftell) ???
#fscanf = Evaluation.addEvent(IdType.STREAM, streamId())
#fwscanf = Evaluation.addEvent(IdType.STREAM, streamId())
#vfscanf = Evaluation.addEvent(IdType.STREAM, streamId())
#vfwscanf = Evaluation.addEvent(IdType.STREAM, streamId())
ftell = FunctionEvent.setOffset(position())
ftello = FunctionEvent.setOffset(position())
ftello64 = FunctionEvent.setOffset(position())
fseek = AnalyzeFunctionPool.cmd("fseek", Json.getValue("function_data/relative_to"))
fseek_beginning_of_file = FunctionEvent.setOffset(Json.getValue("function_data/offset"))
fseek_current_position = FunctionEvent.changeOffset(Json.getValue("function_data/offset"))
fseek_end_of_file = FunctionEvent.setOffset(Json.getValue("function_data/offset"))
fseeko = AnalyzeFunctionPool.cmd("fseeko", Json.getValue("function_data/relative_to"))
fseeko_beginning_of_file = FunctionEvent.setOffset(Json.getValue("function_data/offset"))
fseeko_current_position = FunctionEvent.changeOffset(Json.getValue("function_data/offset"))
fseeko_end_of_file = FunctionEvent.setOffset(Json.getValue("function_data/offset"))
fseeko64 = AnalyzeFunctionPool.cmd("fseeko64", Json.getValue("function_data/relative_to"))
fseeko64_beginning_of_file = FunctionEvent.setOffset(Json.getValue("function_data/offset"))
fseeko64_current_position = FunctionEvent.changeOffset(Json.getValue("function_data/offset"))
fseeko64_end_of_file = FunctionEvent.setOffset(Json.getValue("function_data/offset"))
rewind = FunctionEvent.rewindOffset()
#TODO: get offset in fgetpos and fsetpos functions (ftell) ???
#fgetpos = Evaluation.addEvent(IdType.STREAM, streamId())
#fgetpos64 = Evaluation.addEvent(IdType.STREAM, streamId())
#fsetpos = Evaluation.addEvent(IdType.STREAM, streamId())
#fsetpos64 = Evaluation.addEvent(IdType.STREAM, streamId())
__fpurge = FunctionEvent.deleteUngetOffset()


MPI_File_seek = AnalyzeFunctionPool.cmd("MPI_File_seek", Json.getValue("function_data/relative_to"))
MPI_File_seek_beginning_of_file = FunctionEvent.setOffset(Json.getValue("function_data/offset"))
MPI_File_seek_current_position = FunctionEvent.changeOffset(Json.getValue("function_data/offset"))
MPI_File_seek_end_of_file = FunctionEvent.setOffset(Json.getValue("function_data/offset"))

MPI_File_write = FunctionEvent.setRange(RangeType.WRITE, writtenBytes())
MPI_File_write_at_all = FunctionEvent.setRange(RangeType.WRITE, writtenBytes(), position())
MPI_File_read = FunctionEvent.setRange(RangeType.READ, readBytes())
MPI_File_read_at_all = FunctionEvent.setRange(RangeType.READ, readBytes(), position())


MPI_File_set_view = FunctionEvent.changeOffset(Json.getValue("function_data/offset"))
waitBytes = Json.getValue("function_data/count_bytes")
MPI_Wait = FunctionEvent.setRange(waitBytes())
