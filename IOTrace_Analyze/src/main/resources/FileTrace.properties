ClassNames = Evaluation=iotraceanalyze.analyze.Evaluation;Json=iotraceanalyze.model.logs.Json;IdType=iotraceanalyze.model.analysis.trace.id.FileTraceId$IdType;IdGroup=iotraceanalyze.model.analysis.trace.id.FileTraceId$IdGroup;FileTraceId=iotraceanalyze.model.analysis.trace.id.FileTraceId;FileType=iotraceanalyze.model.analysis.trace.traceables.FileTrace$FileType;RangeType=iotraceanalyze.model.analysis.file.FileRange$RangeType


getFunctionName = Json.getValue("function_name")
getHostName = Json.getValue("hostname")
getProcessId = Json.getValue("pid")
getThreadId = Json.getValue("thread_id")
getStartTime = Json.getValue("time_start")
getEndTime = Json.getValue("time_end")
getError = Json.hasValue("return_state", "error")

hasWrapperInfo = Json.containsObject("wrapper")
getWrapperStartTime = Json.getValue("wrapper/time_start")
getWrapperEndTime = Json.getValue("wrapper/time_end")

streamId = Json.getValue("file_type/stream")
descriptorId = Json.getValue("file_type/descriptor")
asyncId = Json.getValue("file_type/async")
mpiFileId = Json.getValue("file_type/mpi_file")
soId = Json.getValue("file_type/dl_handle")

fileName = Json.getValue("function_data/file_name")
descriptorId4 = Json.getValue("function_data/new_descriptor")
descriptorId5 = Json.getValue("function_data/descriptor1")
descriptorId6 = Json.getValue("function_data/descriptor2")

fork = Evaluation.openProcess(getProcessId(), Json.getValue("function_data/pid"))
vfork = Evaluation.openProcess(getProcessId(), Json.getValue("function_data/pid"))
#TODO: exit + fork = same ProcessId for new process/thread? => wrap exit and delete ids
#TODO: clone => with CLONE_FILES set/not set
#TODO: execve => clear descriptors/streams/... ??? (undoing the effect of the CLONE_FILES flag of clone(2))
#                File descriptors that  are  marked  close-on-exec  are  closed
#					=> remove locks ?
#TODO: ftw-function ???

#TODO: readdir + dirfd

getRegularFileId = Evaluation.getRegularFileId(getHostName(), Json.getValue("function_data/id/device_id"), Json.getValue("function_data/id/inode_nr"))
getSocketFileId = Evaluation.getSocketFileId(getHostName(), Json.getValue("function_data/family"), Json.getValue("function_data/address"))

open_std_fd = Evaluation.openTrace(FileType.WRAPPER, IdType.DESCRIPTOR, descriptorId())
open = Evaluation.openTrace(getRegularFileId(), IdType.DESCRIPTOR, descriptorId(), Json.hasArrayValue("function_data/creation", "tmpfile"), fileName())
open64 = Evaluation.openTrace(getRegularFileId(), IdType.DESCRIPTOR, descriptorId(), Json.hasArrayValue("function_data/creation", "tmpfile"), fileName())
openat = Evaluation.openTrace(getRegularFileId(), IdType.DESCRIPTOR, descriptorId(), Json.hasArrayValue("function_data/creation", "tmpfile"), fileName(), Json.hasValue("function_data/relative_to", "file"), Json.getValue("function_data/file_descriptor"))
creat = Evaluation.openTrace(getRegularFileId(), IdType.DESCRIPTOR, descriptorId(), Json.hasArrayValue("function_data/creation", "tmpfile"), fileName())
creat64 = Evaluation.openTrace(getRegularFileId(), IdType.DESCRIPTOR, descriptorId(), Json.hasArrayValue("function_data/creation", "tmpfile"), fileName())
socket = Evaluation.openTrace(FileType.SOCKET, IdType.DESCRIPTOR, descriptorId())
accept = Evaluation.addId(IdType.DESCRIPTOR, descriptorId(), IdType.DESCRIPTOR, descriptorId4())
accept4 = Evaluation.addId(IdType.DESCRIPTOR, descriptorId(), IdType.DESCRIPTOR, descriptorId4())
socketpair = Evaluation.openTrace(FileType.SOCKET, IdType.DESCRIPTOR, descriptorId5(), IdType.DESCRIPTOR, descriptorId6())
bind = Evaluation.openTrace(FileType.SOCKET, getSocketFileId(), IdType.DESCRIPTOR, descriptorId())
connect = Evaluation.openTrace(FileType.SOCKET, getSocketFileId(), IdType.DESCRIPTOR, descriptorId())
pipe = Evaluation.openTrace(FileType.PIPE, IdType.DESCRIPTOR, descriptorId5(), IdType.DESCRIPTOR, descriptorId6())
pipe2 = Evaluation.openTrace(FileType.PIPE, IdType.DESCRIPTOR, descriptorId5(), IdType.DESCRIPTOR, descriptorId6())
memfd_create = Evaluation.openTrace(FileType.MEMORY, IdType.DESCRIPTOR, descriptorId())
epoll_create = Evaluation.openTrace(FileType.OTHER, IdType.DESCRIPTOR, descriptorId())
epoll_create1 = Evaluation.openTrace(FileType.OTHER, IdType.DESCRIPTOR, descriptorId())
mkstemp = Evaluation.openTrace(getRegularFileId(), IdType.DESCRIPTOR, descriptorId(), Json.getFalse(), fileName())
mkostemp = Evaluation.openTrace(getRegularFileId(), IdType.DESCRIPTOR, descriptorId(), Json.getFalse(), fileName())
mkstemps = Evaluation.openTrace(getRegularFileId(), IdType.DESCRIPTOR, descriptorId(), Json.getFalse(), fileName())
mkostemps = Evaluation.openTrace(getRegularFileId(), IdType.DESCRIPTOR, descriptorId(), Json.getFalse(), fileName())
inotify_init = Evaluation.openTrace(FileType.OTHER, IdType.DESCRIPTOR, descriptorId())
inotify_init1 = Evaluation.openTrace(FileType.OTHER, IdType.DESCRIPTOR, descriptorId())
eventfd = Evaluation.openTrace(FileType.OTHER, IdType.DESCRIPTOR, descriptorId())

close = Evaluation.closeTrace(IdType.DESCRIPTOR, descriptorId())

dup = Evaluation.addId(IdType.DESCRIPTOR, descriptorId(), IdType.DESCRIPTOR, descriptorId4())
dup2 = Evaluation.closeTraceAddId(IdType.DESCRIPTOR, descriptorId(), IdType.DESCRIPTOR, descriptorId4())
dup3 = Evaluation.closeTraceAddId(IdType.DESCRIPTOR, descriptorId(), IdType.DESCRIPTOR, descriptorId4())

descriptors = Json.getValueArrayFromPath("function_data/descriptors")
sendmsg = Evaluation.sendId(IdType.DESCRIPTOR, descriptorId(), IdType.DESCRIPTOR, descriptors())
recvmsg = Evaluation.receiveId(IdType.DESCRIPTOR, descriptorId(), IdType.DESCRIPTOR, descriptors())

fcntlCmd = Json.getValue("function_data/cmd")
descriptorId7 = Json.getValue("function_data/cmd_data/new_descriptor")

fcntl = Evaluation.cmd(fcntlCmd())
fcntl_dupfd = Evaluation.addId(IdType.DESCRIPTOR, descriptorId(), IdType.DESCRIPTOR, descriptorId7())
fcntl_dupfd_cloexec = Evaluation.addId(IdType.DESCRIPTOR, descriptorId(), IdType.DESCRIPTOR, descriptorId7())
fcntl_setfd = Evaluation.addEvent(IdType.DESCRIPTOR, descriptorId())
fcntl_getfd = Evaluation.addEvent(IdType.DESCRIPTOR, descriptorId())
fcntl_setfl = Evaluation.addEvent(IdType.DESCRIPTOR, descriptorId())
fcntl_getfl = Evaluation.addEvent(IdType.DESCRIPTOR, descriptorId())
fcntl_setlk = Evaluation.addEvent(IdType.DESCRIPTOR, descriptorId())
fcntl_setlkw = Evaluation.addEvent(IdType.DESCRIPTOR, descriptorId())
fcntl_getlk = Evaluation.addEvent(IdType.DESCRIPTOR, descriptorId())
fcntl_ofd_setlk = Evaluation.addEvent(IdType.DESCRIPTOR, descriptorId())
fcntl_ofd_setlkw = Evaluation.addEvent(IdType.DESCRIPTOR, descriptorId())
fcntl_ofd_getlk = Evaluation.addEvent(IdType.DESCRIPTOR, descriptorId())
fcntl_setown = Evaluation.addEvent(IdType.DESCRIPTOR, descriptorId())
fcntl_getown = Evaluation.addEvent(IdType.DESCRIPTOR, descriptorId())
fcntl_setown_ex = Evaluation.addEvent(IdType.DESCRIPTOR, descriptorId())
fcntl_getown_ex = Evaluation.addEvent(IdType.DESCRIPTOR, descriptorId())
fcntl_setsig = Evaluation.addEvent(IdType.DESCRIPTOR, descriptorId())
fcntl_getsig = Evaluation.addEvent(IdType.DESCRIPTOR, descriptorId())
fcntl_setlease = Evaluation.addEvent(IdType.DESCRIPTOR, descriptorId())
fcntl_getlease = Evaluation.addEvent(IdType.DESCRIPTOR, descriptorId())
fcntl_notify = Evaluation.addEvent(IdType.DESCRIPTOR, descriptorId())
fcntl_setpipe_sz = Evaluation.addEvent(IdType.DESCRIPTOR, descriptorId())
fcntl_getpipe_sz = Evaluation.addEvent(IdType.DESCRIPTOR, descriptorId())
fcntl_add_seals = Evaluation.addEvent(IdType.DESCRIPTOR, descriptorId())
fcntl_get_seals = Evaluation.addEvent(IdType.DESCRIPTOR, descriptorId())
fcntl_set_rw_hint = Evaluation.addEvent(IdType.DESCRIPTOR, descriptorId())
fcntl_get_rw_hint = Evaluation.addEvent(IdType.DESCRIPTOR, descriptorId())
fcntl_set_file_rw_hint = Evaluation.addEvent(IdType.DESCRIPTOR, descriptorId())
fcntl_get_file_rw_hint = Evaluation.addEvent(IdType.DESCRIPTOR, descriptorId())

read = Evaluation.addEvent(IdType.DESCRIPTOR, descriptorId())
pread = Evaluation.addEvent(IdType.DESCRIPTOR, descriptorId())
pread64 = Evaluation.addEvent(IdType.DESCRIPTOR, descriptorId())
write = Evaluation.addEvent(IdType.DESCRIPTOR, descriptorId())
pwrite = Evaluation.addEvent(IdType.DESCRIPTOR, descriptorId())
pwrite64 = Evaluation.addEvent(IdType.DESCRIPTOR, descriptorId())
lseek = Evaluation.addEvent(IdType.DESCRIPTOR, descriptorId())
lseek64 = Evaluation.addEvent(IdType.DESCRIPTOR, descriptorId())
readv = Evaluation.addEvent(IdType.DESCRIPTOR, descriptorId())
writev = Evaluation.addEvent(IdType.DESCRIPTOR, descriptorId())
preadv = Evaluation.addEvent(IdType.DESCRIPTOR, descriptorId())
preadv64 = Evaluation.addEvent(IdType.DESCRIPTOR, descriptorId())
pwritev = Evaluation.addEvent(IdType.DESCRIPTOR, descriptorId())
pwritev64 = Evaluation.addEvent(IdType.DESCRIPTOR, descriptorId())
preadv2 = Evaluation.addEvent(IdType.DESCRIPTOR, descriptorId())
preadv64v2 = Evaluation.addEvent(IdType.DESCRIPTOR, descriptorId())
pwritev2 = Evaluation.addEvent(IdType.DESCRIPTOR, descriptorId())
pwritev64v2 = Evaluation.addEvent(IdType.DESCRIPTOR, descriptorId())
# TODO: copy_file_range new wrapper with only one event
copy_file_range = Evaluation.addEvent(IdType.DESCRIPTOR, descriptorId())

memoryId = Json.getValue("file_type/address")
memoryLength = Json.getValue("file_type/length")
memoryId2 = Json.getValue("function_data/address")
memoryLength2 = Json.getValue("function_data/length")
memoryId3 = Json.getValue("function_data/new_address")
memoryLength3 = Json.getValue("function_data/new_length")
memoryOffset = Json.getValue("function_data/offset")
memoryAnonymous = Json.hasArrayValue("function_data/map_flags", "anonymous")
memoryShared = Json.hasValue("function_data/map_flags", "shared")

mmap = Evaluation.addId(IdType.DESCRIPTOR, descriptorId(), memoryId2(), memoryLength2(), memoryAnonymous(), memoryOffset(), memoryShared())
mmap64 = Evaluation.addId(IdType.DESCRIPTOR, descriptorId(), memoryId2(), memoryLength2(), memoryAnonymous(), memoryOffset(), memoryShared())
munmap = Evaluation.addEvent(memoryId(), memoryLength())
msync = Evaluation.addEvent(memoryId(), memoryLength())
mremap = Evaluation.addId(memoryId(), memoryLength(), memoryId3(), memoryLength3())
madvise = Evaluation.addEvent(memoryId(), memoryLength(), Json.hasValue("function_data/advice", "dontfork"), Json.hasValue("function_data/advice", "dofork"))
posix_madvise = Evaluation.addEvent(memoryId(), memoryLength())

descriptorIds = Json.mergeArrays(Json.mergeArrays(Json.getValueArrayFromPath("function_data/files_waiting_for_read"), Json.getValueArrayFromPath("function_data/files_waiting_for_write")), Json.getValueArrayFromPath("function_data/files_waiting_for_except"))

select = Evaluation.addEvent(IdType.DESCRIPTOR, descriptorIds())

sync = Evaluation.addEvent(IdGroup.HOST)
# TODO: syncfs only one filesystem
syncfs = Evaluation.addEvent(IdGroup.HOST)
fsync = Evaluation.addEvent(IdType.DESCRIPTOR, descriptorId())
fdatasync = Evaluation.addEvent(IdType.DESCRIPTOR, descriptorId())

open_std_file = Evaluation.openTrace(FileType.WRAPPER, IdType.STREAM, streamId())
fopen = Evaluation.openTrace(getRegularFileId(), IdType.STREAM, streamId(), Json.hasArrayValue("function_data/creation", "tmpfile"), fileName())
fopen64 = Evaluation.openTrace(getRegularFileId(), IdType.STREAM, streamId(), Json.hasArrayValue("function_data/creation", "tmpfile"), fileName())
freopen = Evaluation.closeOldOpenNewTrace(getRegularFileId(), IdType.STREAM, streamId(), Json.hasArrayValue("function_data/creation", "tmpfile"), fileName())
freopen64 = Evaluation.closeOldOpenNewTrace(getRegularFileId(), IdType.STREAM, streamId(), Json.hasArrayValue("function_data/creation", "tmpfile"), fileName())
tmpfile = Evaluation.openTrace(getRegularFileId(), IdType.STREAM, streamId(), Json.getTrue(), "")
tmpfile64 = Evaluation.openTrace(getRegularFileId(), IdType.STREAM, streamId(), Json.getTrue(), "")
popen = Evaluation.openTrace(FileType.OTHER, IdType.STREAM, streamId())

descriptorId2 = Json.getValue("function_data/descriptor")
descriptorId3 = Json.getValue("function_data/file_descriptor")

fdopen = Evaluation.addId(IdType.DESCRIPTOR, descriptorId2(), IdType.STREAM, streamId())
fileno = Evaluation.addId(IdType.STREAM, streamId(), IdType.DESCRIPTOR, descriptorId3(), FileTraceId.isStandardDescriptor(Json.getValue("function_data/file_descriptor")))

fclose = Evaluation.closeTrace(IdType.STREAM, streamId())
fcloseall = Evaluation.closeTrace(IdType.STREAM, IdGroup.PROCESS)

flockfile = Evaluation.addEvent(IdType.STREAM, streamId())
ftrylockfile = Evaluation.addEvent(IdType.STREAM, streamId())
funlockfile = Evaluation.addEvent(IdType.STREAM, streamId())
fwide = Evaluation.addEvent(IdType.STREAM, streamId())
fputc = Evaluation.addEvent(IdType.STREAM, streamId())
fputwc = Evaluation.addEvent(IdType.STREAM, streamId())
fputc_unlocked = Evaluation.addEvent(IdType.STREAM, streamId())
fputwc_unlocked = Evaluation.addEvent(IdType.STREAM, streamId())
putc = Evaluation.addEvent(IdType.STREAM, streamId())
putwc = Evaluation.addEvent(IdType.STREAM, streamId())
putc_unlocked = Evaluation.addEvent(IdType.STREAM, streamId())
putwc_unlocked = Evaluation.addEvent(IdType.STREAM, streamId())
fputs = Evaluation.addEvent(IdType.STREAM, streamId())
fputws = Evaluation.addEvent(IdType.STREAM, streamId())
fputs_unlocked = Evaluation.addEvent(IdType.STREAM, streamId())
fputws_unlocked = Evaluation.addEvent(IdType.STREAM, streamId())
putw = Evaluation.addEvent(IdType.STREAM, streamId())
fgetc = Evaluation.addEvent(IdType.STREAM, streamId())
fgetwc = Evaluation.addEvent(IdType.STREAM, streamId())
fgetc_unlocked = Evaluation.addEvent(IdType.STREAM, streamId())
fgetwc_unlocked = Evaluation.addEvent(IdType.STREAM, streamId())
getc = Evaluation.addEvent(IdType.STREAM, streamId())
getwc = Evaluation.addEvent(IdType.STREAM, streamId())
getc_unlocked = Evaluation.addEvent(IdType.STREAM, streamId())
getwc_unlocked = Evaluation.addEvent(IdType.STREAM, streamId())
getw = Evaluation.addEvent(IdType.STREAM, streamId())
getline = Evaluation.addEvent(IdType.STREAM, streamId())
getdelim = Evaluation.addEvent(IdType.STREAM, streamId())
fgets = Evaluation.addEvent(IdType.STREAM, streamId())
fgetws = Evaluation.addEvent(IdType.STREAM, streamId())
fgets_unlocked = Evaluation.addEvent(IdType.STREAM, streamId())
fgetws_unlocked = Evaluation.addEvent(IdType.STREAM, streamId())
ungetc = Evaluation.addEvent(IdType.STREAM, streamId())
ungetwc = Evaluation.addEvent(IdType.STREAM, streamId())
fread = Evaluation.addEvent(IdType.STREAM, streamId())
fread_unlocked = Evaluation.addEvent(IdType.STREAM, streamId())
fwrite = Evaluation.addEvent(IdType.STREAM, streamId())
fwrite_unlocked = Evaluation.addEvent(IdType.STREAM, streamId())
fprintf = Evaluation.addEvent(IdType.STREAM, streamId())
fwprintf = Evaluation.addEvent(IdType.STREAM, streamId())
vfprintf = Evaluation.addEvent(IdType.STREAM, streamId())
vfwprintf = Evaluation.addEvent(IdType.STREAM, streamId())
fscanf = Evaluation.addEvent(IdType.STREAM, streamId())
fwscanf = Evaluation.addEvent(IdType.STREAM, streamId())
vfscanf = Evaluation.addEvent(IdType.STREAM, streamId())
vfwscanf = Evaluation.addEvent(IdType.STREAM, streamId())
feof = Evaluation.addEvent(IdType.STREAM, streamId())
feof_unlocked = Evaluation.addEvent(IdType.STREAM, streamId())
ferror = Evaluation.addEvent(IdType.STREAM, streamId())
ferror_unlocked = Evaluation.addEvent(IdType.STREAM, streamId())
clearerr = Evaluation.addEvent(IdType.STREAM, streamId())
clearerr_unlocked = Evaluation.addEvent(IdType.STREAM, streamId())
ftell = Evaluation.addEvent(IdType.STREAM, streamId())
ftello = Evaluation.addEvent(IdType.STREAM, streamId())
ftello64 = Evaluation.addEvent(IdType.STREAM, streamId())
fseek = Evaluation.addEvent(IdType.STREAM, streamId())
fseeko = Evaluation.addEvent(IdType.STREAM, streamId())
fseeko64 = Evaluation.addEvent(IdType.STREAM, streamId())
rewind = Evaluation.addEvent(IdType.STREAM, streamId())
fgetpos = Evaluation.addEvent(IdType.STREAM, streamId())
fgetpos64 = Evaluation.addEvent(IdType.STREAM, streamId())
fsetpos = Evaluation.addEvent(IdType.STREAM, streamId())
fsetpos64 = Evaluation.addEvent(IdType.STREAM, streamId())
fflush = Evaluation.addEventForProcess(IdType.STREAM, streamId())
fflush_unlocked = Evaluation.addEventForProcess(IdType.STREAM, streamId())
setvbuf = Evaluation.addEvent(IdType.STREAM, streamId())
setbuf = Evaluation.addEvent(IdType.STREAM, streamId())
setbuffer = Evaluation.addEvent(IdType.STREAM, streamId())
setlinebuf = Evaluation.addEvent(IdType.STREAM, streamId())
__freadable = Evaluation.addEvent(IdType.STREAM, streamId())
__fwritable = Evaluation.addEvent(IdType.STREAM, streamId())
__freading = Evaluation.addEvent(IdType.STREAM, streamId())
__fwriting = Evaluation.addEvent(IdType.STREAM, streamId())
__fsetlocking = Evaluation.addEvent(IdType.STREAM, streamId())
_flushlbf = Evaluation.addEvent(IdType.STREAM, streamId())
__fpurge = Evaluation.addEvent(IdType.STREAM, streamId())
__flbf = Evaluation.addEvent(IdType.STREAM, streamId())
__fbufsize = Evaluation.addEvent(IdType.STREAM, streamId())
__fpending = Evaluation.addEvent(IdType.STREAM, streamId())

soId = Json.getValue("file_type/dl_handle")

dlopen = Evaluation.openTrace(getRegularFileId(), IdType.SO, soId(), Json.getFalse(), fileName())
dlmopen = Evaluation.openTrace(getRegularFileId(), IdType.SO, soId(), Json.getFalse(), fileName())

init_on_load = Evaluation.addWrapperEvent()
cleanup = Evaluation.addWrapperEvent()
execve = Evaluation.addWrapperEvent()
execv = Evaluation.addWrapperEvent()
execl = Evaluation.addWrapperEvent()
execvp = Evaluation.addWrapperEvent()
execlp = Evaluation.addWrapperEvent()
execvpe = Evaluation.addWrapperEvent()
execle = Evaluation.addWrapperEvent()
_exit = Evaluation.addWrapperEvent()
_Exit = Evaluation.addWrapperEvent()
exit_group = Evaluation.addWrapperEvent()

readdir = Evaluation.ignore()
dirfd = Evaluation.ignore()

getMpiFileId = Json.getValue("file_type/mpi_file")
getMpiRequestId = Json.getValue("function_data/request_id")

MPI_File_open = Evaluation.openTrace(getRegularFileId(), IdType.MPI_FILE, getMpiFileId() , Json.getFalse(), fileName())
MPI_File_seek = Evaluation.addEvent(IdType.MPI_FILE, getMpiFileId())
MPI_File_write = Evaluation.addEvent(IdType.MPI_FILE, getMpiFileId())
MPI_File_write_at_all = Evaluation.addEvent(IdType.MPI_FILE, getMpiFileId())
MPI_File_read = Evaluation.addEvent(IdType.MPI_FILE, getMpiFileId())
MPI_File_read_at_all = Evaluation.addEvent(IdType.MPI_FILE, getMpiFileId())
MPI_File_iwrite = Evaluation.addId(IdType.MPI_FILE, getMpiFileId(), IdType.MPI_REQUEST, getMpiRequestId(), RangeType.WRITE)
MPI_File_iread = Evaluation.addId(IdType.MPI_FILE, getMpiFileId(), IdType.MPI_REQUEST, getMpiRequestId(), RangeType.READ)
MPI_Wait = Evaluation.addEvent(IdType.MPI_REQUEST, Json.getValue("file_type/request_id"))
MPI_Waitall = Evaluation.addEvent(IdType.MPI_REQUEST, Json.combineObjectValuesToList("function_data/requests", "request_id"))
MPI_File_set_view = Evaluation.addEvent(IdType.MPI_FILE, getMpiFileId())
