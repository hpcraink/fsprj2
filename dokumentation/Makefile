# Makefile for Dissertation...
# Use
#   make           to produce a Postscript-version
#   make book      to produce a two-page version
#   make pdf       to produce a pdf-output only
#   make aspell    to produce aspell checking
#   make clean     to get rid of studienarbeit.[abdl]* files
#   make veryclean to get rid of everything which can be reproduced
#   make distclean to get rid of the final files as well.
#
# Change the following accordingly:

MAIN=vorlage
BIB_FILE=bib/bib.bib
LATEX=pdflatex
GNUPLOT_BIN=/opt/gnuplot-4.2.0/bin/gnuplot
RM=rm -fr

TEX      := $(shell find . -name '[a-zA-Z]*.tex' -print)
GNUPLOT  := $(shell find . -name '*.gnuplot' -print)
FIG      := $(shell find . -mindepth 1 -name '[a-zA-Z]*.fig' -print)
EPS      := $(shell find . -mindepth 1 -name '*.eps' -print)
PNG      := $(shell find . -mindepth 1 -name '*.png' -print)
PS       := $(shell find . -mindepth 1 -name '*.ps' -print)

CONVERT_GNUPLOT_EPS=$(GNUPLOT:.gnuplot=.eps)
CONVERT_PNG_EPS=$(PNG:.png=.eps)
CONVERT_FIG_EPS=$(FIG:.fig=.eps)
CONVERT_FIG_EEPIC=$(FIG:.fig=.eepic)      # Currently unused in the dependancy

ifeq ($(LATEX),pdflatex)
  # All EPS-files and generated EPS-files need to be converted to PDF
  EPS+=$(CONVERT_GNUPLOT_EPS)
  EPS+=$(CONVERT_PNG_EPS)

  CONVERT_FIG_PDF=$(FIG:.fig=.pdf)
  CONVERT_EPS_PDF=$(EPS:.eps=.pdf)
  CONVERT_PS_PDF=$(PS:.ps=.pdf)

  all: $(MAIN).pdf
else
  all: $(MAIN).ps
endif

# All output files generated by auxiliary programs such as bibtex or makeindex
# In case we use nomencl or glossary, we need $(MAIN).gls as well.
OBJ=$(MAIN).aux \
    $(MAIN).bbl \
    $(MAIN).ind

# REMOVE dependance on $(MAIN).ind?

$(MAIN).ps: graphics_ps $(TEX) $(OBJ)
	@echo "---- Running $(LATEX) $(MAIN).tex ---"
	script -c "$(LATEX) $(MAIN).tex" -f $(MAIN).$(LATEX)_output
	@while ( grep -q 'Rerun to get' $(MAIN).log ) ; do \
          echo "---- Rerunning $(LATEX) $(MAIN).tex ---" ; \
          script -c "$(LATEX) $(MAIN).tex" -f $(MAIN).$(LATEX)_output ; \
        done
	dvips $(MAIN).dvi -o $(MAIN)_tmp.ps
	mv $(MAIN)_tmp.ps $(MAIN).ps
	@echo "OVERALL: `grep '[[:digit:]]\+\ pages' $(MAIN).log | cut -f2- -d'(' | cut -f1 -d','`"

$(MAIN).pdf: graphics_pdf $(TEX) $(OBJ)
	@echo "---- Running $(LATEX) $(MAIN).tex ---"
	script -c "$(LATEX) $(MAIN).tex" -f $(MAIN).$(LATEX)_output
	@while ( grep -q 'Rerun to get' $(MAIN).log ) ; do \
          echo "---- Rerunning $(LATEX) $(MAIN).tex ---" ; \
	  script -c "$(LATEX) $(MAIN).tex" -f $(MAIN).$(LATEX)_output ; \
        done
	pdfinfo $(MAIN).pdf

#
# This may seem funny: For the Summary, we refer to the labels in the main file!
# Therefore we copy the AUX file.
#
summary: $(MAIN).aux
	cp $(MAIN).aux zusammenfassung_westkaemper.aux
	$(LATEX) zusammenfassung_westkaemper.tex
	@if [ -f zusammenfassung_westkaemper.dvi ] ; then \
	  dvips zusammenfassung_westkaemper.dvi ; \
	fi

graphics_ps: $(CONVERT_GNUPLOT_EPS) $(CONVERT_PNG_EPS) $(CONVERT_FIG_EPS)

graphics_pdf: $(CONVERT_GNUPLOT_EPS) $(CONVERT_PNG_EPS) $(CONVERT_FIG_PDF) $(CONVERT_EPS_PDF) $(CONVERT_PS_PDF)

gv view:
	@if test -f $(MAIN).pdf ; then \
	  FILE=$(MAIN).pdf ; \
	else \
	  FILE=$(MAIN).ps ; \
	fi ; \
	echo "---- Displaying $$FILE ---" ; \
	nice -n 19 gv -spartan -scale -2 $$FILE &

book: $(MAIN).ps
	pstops "2:0L@.7(21cm,0)+1L@.7(21cm,14.85cm)" $(MAIN).ps $(MAIN)_small.ps
	if [ -f ./duplexon.ps ] ; then \
	  cat duplexon.ps $(MAIN)_small.ps > $(MAIN)_small_duplex.ps ; \
	fi


#
# Use makeindex to create the index and nomenclature.
# For the index, specify our own style-file, to insert our \acselfdefined command in order to
# output the selfdefined acronyms, so that they don't get reprinted, like Pthread (Pthread).
#
$(MAIN).ind: $(TEX)
	makeindex -s $(MAIN).ist $(MAIN)


# $(MAIN).gls: $(TEX)
# 	makeindex $(MAIN).glo -s nomencl.ist -o $(MAIN).gls

$(MAIN).aux: $(TEX)
	@echo "---- Running $(LATEX) $(MAIN).tex to get $(MAIN).aux-file ---"
	$(LATEX) $(MAIN).tex

#
# If we use chapterbib, we should run bibtex on each of the .aux-files
#
$(MAIN).bbl: $(BIB_FILE)
	# @for i in *.aux ; do bibtex `basename $$i .tex` ; done
	bibtex $(MAIN)

#
# Converting GNUplot files to EPS may generate output on stderr when using fit.
# This also generates a file *.fitlog which needs to be deleted upon distclean
#
$(CONVERT_GNUPLOT_EPS):
	$(shell cd `dirname $@` ; $(GNUPLOT_BIN) `basename $@ .eps`.gnuplot > /dev/null 2>&1 )

$(CONVERT_PNG_EPS):
	$(shell cd `dirname $@` ; convert `basename $@ .eps`.png `basename $@` )

%.eps: %.fig
	fig2dev -L eps $< $@

%.eepic: %.fig
	fig2dev -L eepic $< $@

%.pdf: %.fig
	fig2dev -L pdftex -p 1 $< $@

%.pdf: %.eps
	epstopdf --outfile=$@ $<

%.pdf: %.ps
	epstopdf --outfile=$@ $<

aspell:
	aspell --encoding=iso-8859-1 --mode=tex --lang=de -c *.tex

clean:
	$(RM) $(shell find . -name '*.aux' -print)
	$(RM) $(MAIN).aux $(MAIN).bbl $(MAIN).blg $(MAIN).brf $(MAIN).dvi $(MAIN).glo $(MAIN).gls $(MAIN).idx $(MAIN).ilg $(MAIN).ind $(MAIN).lof $(MAIN).log $(MAIN).lot $(MAIN).out $(MAIN).toc tmp.txt

veryclean: clean
	find . \( -not -type d \) -and \
	  \( -name '*~' -o -name '*.aux' -o -name '*.bak' -o -name '#*#' -o -name '*.fitlog' \) -print | xargs $(RM)
	$(RM) $(MAIN).*_output
	$(RM) $(CONVERT_GNUPLOT_EPS) $(CONVERT_PNG_EPS) $(CONVERT_FIG_EPS) $(CONVERT_FIG_EEPIC) $(CONVERT_FIG_PDF) $(CONVERT_EPS_PDF) $(CONVERT_PS_PDF)

distclean maintainer-clean: veryclean
	$(RM) $(MAIN).pdf $(MAIN).pdf.gz $(MAIN).pdf.bz2 $(MAIN).ps $(MAIN)_tmp.ps $(MAIN).ps.gz $(MAIN).ps.bz2 $(MAIN)_small.ps $(MAIN)_small_duplex.ps
	$(RM) zusammenfassung_westkaemper.[adilop]*

