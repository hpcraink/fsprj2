%!PS-Adobe-3.0 EPSF-3.0
%%Title: (HE_Logo_4c.eps)
%%Version: 1 4
%%Creator: Adobe Acrobat 6.0
%%CreationDate: 16:16:17 11/12/07
%%For: (Andreas Jung)
%%DocumentData: Clean7Bit
%%LanguageLevel: 3
%%BoundingBox: 17 13 143 44
%%HiResBoundingBox: 17.150208 12.798401 142.811005 43.855698
%%Pages: 0
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentSuppliedResources:
%%+ procset (Adobe Acrobat - PDF operators) 1.2 0
%%EndComments
%%BeginProlog
%%EndProlog
%%BeginSetup
%ADOPrintSettings: L3 W0 VM op crd os scsa t h ef bg ucr sf ef r b fa pr seps ttf hb Drucker-/PostScript-Farbmanagement 0
%%BeginResource: procset l3check 6.0 1
%%Copyright: Copyright 1998,2001-2002 Adobe Systems Incorporated. All Rights Reserved.
systemdict /languagelevel known
{ systemdict /languagelevel get 3 lt }
{ true }
ifelse
{
initgraphics /Helvetica findfont 18 scalefont setfont
72 600 moveto (Error: Your printer driver needs to be configured) dup show ==
72 580 moveto (for printing to a PostScript Language Level )dup show ==
systemdict /languagelevel known {(2)}{(1)}ifelse dup show ==
( printer.) dup show ==
/Helvetica-Bold findfont 16 scalefont setfont
72 520 moveto (Windows and Unix) show
/Times-Roman findfont 16 scalefont setfont
72 500 moveto (Select \252Language Level )show
systemdict /languagelevel known {(2)}{(1)}ifelse show
(\272 in the PostScript options section) show
72 480 moveto (of the Acrobat print dialog.) show
/Helvetica-Bold findfont 16 scalefont setfont
72 440 moveto (Macintosh) show
/Times-Roman findfont 16 scalefont setfont
72 420 moveto (In the Chooser, select your printer driver.) show
72 400 moveto (Then select your printer and click the Setup button.) show
72 380 moveto (Follow any on-screen dialogs that may appear.) show
showpage
quit
}
if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.19 0
%%Copyright: Copyright 1987-2003 Adobe Systems Incorporated.
%%Version: 1.19 0
systemdict /languagelevel known dup
	{ currentglobal false setglobal }
	{ false }
ifelse
exch
userdict /Adobe_CoolType_Utility 2 copy known
	{ 2 copy get dup maxlength 25 add dict copy }
	{ 25 dict }
ifelse put
Adobe_CoolType_Utility
	begin
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch /eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{ globaldict begin currentglobal true setglobal }
if
	/ct_AddStdCIDMap
		ct_Level2?
			{ {
			((Hex) 57 StartData
			0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
			7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
			d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
			cc36 74f4 1144 b13b 77) 0 () /SubFileDecode filter cvx exec
			} }
			{ {
			<BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
			4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A> eexec
			} }
		ifelse bind def
userdict /cid_extensions known
dup { cid_extensions /cid_UpdateDB known and } if
	 {
	 cid_extensions
	 begin
	 /cid_GetCIDSystemInfo
		 {
		 1 index type /stringtype eq
			 { exch cvn exch }
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				 {
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					 {
					 1 index load
					 3 index get
					 dup null eq
						  { pop pop cid_UpdateDB }
						  {
						  exch
						  1 index /Created get eq
							  { exch pop exch pop }
							  { pop cid_UpdateDB }
						  ifelse
						  }
					 ifelse
					 }
					 { pop cid_UpdateDB }
				 ifelse
				 }
				 { cid_UpdateDB }
			 ifelse
			 end
		 } bind def
	 end
	 }
if
ct_Level2?
	{ end setglobal }
if
	/ct_UseNativeCapability?  systemdict /composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring () def
		/usewidths? true def
		end def
	ct_Level2? { setglobal } { pop } ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict /languagelevel known
				{ pop /CIDFont findresource /GlyphDirectory get }
				{
				1 index /CIDFont findresource /GlyphDirectory
				get dup type /dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			} def
		/+
			{
			systemdict /languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{ 1 dict begin }
			ifelse
			/$ exch def
			systemdict /languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			? { $ begin } if
			} def
		/? { $ type /dicttype eq } def
		/| {
			userdict /Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data /AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					  begin
						AddWidths?
								{
								Adobe_CoolType_Data /CC 3 index put
								? { def } { $ 3 1 roll put } ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont /Widths get exch CC exch put
								}
								{ ? { def } { $ 3 1 roll put } ifelse }
							ifelse
					end
				end
				}
				{ ? { def } { $ 3 1 roll put } ifelse }	ifelse
				}
				{ ? { def } { $ 3 1 roll put } ifelse }
			ifelse
			} def
		/!
			{
			? { end } if
			systemdict /languagelevel known
				{ gvm setglobal }
			if
			end
			} def
		/: { string currentfile exch readstring pop } executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		 /c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		 /c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		 /c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		 /c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		 /c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		 /c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		 /c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		 /c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		 /cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		 /cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		 /cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		 /cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		 /cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx [.001 0 0 .001 0 0] def
		/ct_1000Mtx [1000 0 0 1000 0 0] def
		/ct_raise {exch cvx exch errordict exch get exec stop} bind def
		/ct_reraise
			{ cvx $error /errorname get (Error: ) print dup (						  ) cvs print
					errordict exch get exec stop
			} bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			} bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility /ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{ dup string /dst_string exch def }
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex  get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string  dst_index 2 index putinterval
						length dst_index add /dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string  dst_index 2 index putinterval
						pop dup dst_index add /dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							  { arrayIndex get }
							  {
							  pop
							  exit
							  }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			} bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{ /unknowninstancename /Category resourcestatus }
			stopped
				{ cleartomark setglobal true }
				{ cleartomark currentglobal not exch setglobal }
			ifelse
				{
					{
					mark 3 1 roll /Category findresource
						begin
						ct_Vars /vm currentglobal put
						({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec
							{ cleartomark false }
							{ { 3 2 roll pop true } { cleartomark false } ifelse }
						ifelse
						ct_Vars /vm get setglobal
						end
					}
				}
				{ { resourcestatus } }
			ifelse bind def
			/CIDFont /Category ct_resourcestatus
				{ pop pop }
				{
				currentglobal  true setglobal
				/Generic /Category findresource
				dup length dict copy
				dup /InstanceType /dicttype put
				/CIDFont exch /Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit /ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				  /Registry (Adobe) def
				  /Ordering (Identity) def
				  /Supplement 0 def
				end def
				/CMapName /Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000> <FFFF>
				endcodespacerange
				1 begincidrange
				<0000> <FFFF> 0
				endcidrange
				endcmap
				CMapName currentdict /CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont  10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{ pop pop /defineresource /undefined ct_raise }
				ifelse
				} bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{ get 3 1 roll pop pop}
						{ pop pop /findresource /undefinedresource ct_raise }
					ifelse
					}
					{ pop pop /findresource /undefined ct_raise }
				ifelse
				} bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{ pop pop /findresource /undefined ct_raise }
				ifelse
				} bind def
			/ct_resourcestatus /resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup (Binary) eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{ cid_BYTE_COUNT () /SubFileDecode filter }
							stopped
								{ pop pop pop }
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup (Hex) eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{ null exch /ASCIIHexDecode filter /readstring }
							stopped
								{ pop exch pop (>) exch /readhexstring }
							if
							}
							{ (>) exch /readhexstring }
						ifelse
						load
						exit
						}
					if
					/StartData /typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch /GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop /readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				} bind def
			/StartData
				{
				mark
					{
					currentdict
					dup /FDArray get 0 get /FontMatrix get
					0 get 0.001 eq
						{
						dup /CDevProc known not
							{
							/CDevProc 1183615869 internaldict /stdCDevProc 2 copy known
								{ get }
								{
								pop pop
								{ pop pop pop pop pop 0 -1000 7 index 2 div 880 }
								}
							ifelse
							def
							}
						if
						}
						{
						 /CDevProc
							 {
							 pop pop pop pop pop
							 0
							 1 cid_temp /cid_CIDFONT get
							 /FDArray get 0 get
							 /FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							 } def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup /cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup /SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup /SubrMapOffset undef
										dup /SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{ pop }
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict /CIDFont defineresource pop
					end end
					}
				stopped
					{ cleartomark /StartData ct_reraise }
				if
				} bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit /ProcSet ct_resourcestatus
				{ true }
				{ /CIDInitC /ProcSet ct_resourcestatus }
			ifelse
				{
				pop pop
				/CIDInit /ProcSet findresource
				ct_UseNativeCapability?
					{ pop null }
					{ /CIDInit ct_CIDInit /ProcSet defineresource pop }
				ifelse
				}
				{ /CIDInit ct_CIDInit /ProcSet defineresource pop null }
			ifelse
			ct_Vars exch /ct_oldCIDInit exch put
			} bind def
		/ct_restoreCIDInit
			{
			ct_Vars /ct_oldCIDInit get dup null ne
				{ /CIDInit exch /ProcSet defineresource pop }
				{ pop }
			ifelse
			} bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility /ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{ pop 0 }
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{ get }
								{ pop pop nullstring }
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{ 0 FDBytes ct_cvnsi }
									{ pop 0 }
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{ /charstring nullstring def exit }
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			} def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			} def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont /Widths get cid
					2 copy known
						{ get exch pop aload pop }
						{ pop pop stringwidth }
					ifelse
					}
					{ stringwidth }
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			} def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{ get }
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup /FontMatrix 2 copy known
						{ get }
						{ pop pop ct_defaultFontMtx }
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont /Widths get def
					/CharStrings 1 dict dup /.notdef
						<d841272cf18f54fc13> dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup /CharStrings get 1 index /Encoding get
			ct_dfCharCode get charstring put
			rootfont /WMode 2 copy known
				{ get }
				{ pop pop 0 }
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ ct_str1 show }
			ifelse
			} def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup /FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ ct_1000Mtx matrix concatmatrix concat }
				{ pop }
			ifelse
			/Private get
			Adobe_CoolType_Utility /ct_Level2? get not
				{
				ct_dfDict /Private
				3 -1 roll
					{ put }
				1183615869 internaldict /superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility /ct_Level2? get
				{ 1 index }
				{ 3 index /Private get mark 6 1 roll }
			ifelse
			dup /RunInt known
				{ /RunInt get }
				{ pop /CCRun }
			ifelse
			get exec
			Adobe_CoolType_Utility /ct_Level2? get not
				{ cleartomark }
			if
			} bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility /ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{ stop }
			if
			end
			end
			end
			end
			} bind def
		/BaseFontNameStr (BF00) def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix  [0.001 0 0 0.001 0 0] def
			/FontBBox  [-250 -250 1250 1250] def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix  [0.001 0 0 0.001 0 0] def
			/FontBBox  [-250 -250 1250 1250] def
			/Encoding ct_cHexEncoding def
			/BuildChar /ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString /ct_Type3ShowCharString load def
				/ct_dfSetCacheProc /ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup /lenIV 4 put def
				/CharStrings 1 dict dup /.notdef <d841272cf18f54fc13> put def
				/PaintType 0 def
				/ct_ShowCharString /ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{ exit }
				if
				}
			for
			exch pop exch pop
			} bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch /WMode exch def
				exch /FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup /FontMatrix known
				{ dup /FontMatrix get /FontMatrix exch def }
				{ /FontMatrix matrix def }
			ifelse
				/bfCount 1 index /CIDCount get 256 idiv 1 add
					dup 256 gt { pop 256} if def
				/Encoding
					256 array 0 1 bfCount 1 sub { 2 copy dup put pop } for
					bfCount 1 255 { 2 copy bfCount put pop } for
					def
				/FDepVector bfCount dup 256 lt { 1 add } if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont /FontBBox known
						{ CIDFont /FontBBox get /FontBBox exch def }
					if
					CIDFont /CDevProc known
						{ CIDFont /CDevProc get /CDevProc exch def }
					if
					currentdict
					end
				BaseFontNameStr 3 (0) putinterval
				0 1 bfCount dup 256 eq { 1 sub } if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup /CIDFirstByte exch 256 mul def
						FontType 3 eq
							{ /ct_FDDict 2 dict def }
						if
						currentdict
						end
					1 index  16
					BaseFontNameStr  2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{ /Widths 1 index /CIDFont get /GlyphDirectory get length dict def }
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont /Widths get
						begin
						exch /CIDFont get /GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{ exch pop }
			ifelse
			} bind def
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{
				2 index /CMap ct_resourcestatus
					{ pop pop exch pop }
					{
					/CIDInit /ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch /WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry (Adobe) def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-) search
									{
									pop pop
									(-) search
										{
										dup length string copy
										exch pop exch pop
										}
										{ pop (Identity)}
									ifelse
									}
									{ pop  (Identity)  }
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000> <FFFF>
							endcodespacerange
							1 begincidrange
							<0000> <FFFF> 0
							endcidrange
							endcmap
							CMapName currentdict /CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get /CIDFont findresource
				ct_makeocf
				}
			ifelse
			} bind def
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index /CMap ct_resourcestatus
					{ pop pop }
					{
					/CIDInit /ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry (Adobe) def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-) search
							{
							pop pop
							(-) search
								{ dup length string copy exch pop exch pop }
								{ pop (Identity) }
							ifelse
							}
							{ pop (Identity) }
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000> <FFFF>
					endcodespacerange
					1 begincidrange
					<0000> <FFFF> 0
					endcidrange
					endcmap
					CMapName currentdict /CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get /CIDFont findresource
				ct_makeocf
				}
			ifelse
			} bind def
		currentdict readonly pop
		end
	end
%%EndResource
/currentpacking where{pop currentpacking true setpacking}if
%%BeginResource: procset pdfvars 6.0 1
%%Copyright: Copyright 1987-2002 Adobe Systems Incorporated. All Rights Reserved.
%%Title: definition of dictionary of variables used by PDF & PDFText procsets
userdict /PDF 162 dict put
userdict /PDFVars 89 dict dup begin put
/docSetupDone false def
/InitAll 0 def
/TermAll 0 def
/DocInitAll 0 def
/DocTermAll 0 def
/_pdfEncodings 2 array def
/_pdf_str1 1 string def
/_pdf_i 0 def
/_pdf_na 0 def
/_pdf_showproc 0 def
/_italMtx [1 0 .212557 1 0 0] def
/_italMtx_WMode1 [1 -.212557 0 1 0 0] def
/_italMtxType0 [1 0 .1062785 1 0 0] def
/_italMtx_WMode1Type0 [1 -.1062785 0 1 0 0] def
/_basefont 0 def
/_basefonto 0 def
/_pdf_oldCIDInit null def
/_pdf_FontDirectory 30 dict def
/_categories 10 dict def
/_sa? true def
/_ColorSep5044? false def
/nulldict 0 dict def
/_processColors 0 def
/overprintstack null def
/_defaulttransfer currenttransfer def
/_defaultflatness currentflat def
/_defaulthalftone null def
/_defaultcolortransfer null def
/_defaultblackgeneration null def
/_defaultundercolorremoval null def
/_defaultcolortransfer null def
PDF begin
[/c/cs/cm/d/d0/f/h/i/j/J/l/m/M/n/q/Q/re/ri/S/sc/sh/Tf/w/W
/applyInterpFunc/applystitchFunc/domainClip/encodeInput
/initgs/int/limit/rangeClip
/defineRes/undefineRes/findRes/setSA/pl
/? /! /| /: /+ /GetGlyphDirectory
/pdf_flushFilters /pdf_readstring /pdf_dictOp /pdf_image /pdf_maskedImage
/pdf_shfill /pdf_sethalftone
] {null def} bind forall
end
end
%%EndResource
PDFVars begin PDF begin
%%BeginResource: procset pdfutil 6.0 1
%%Copyright: Copyright 1993-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Basic utilities used by other PDF procsets
/bd {bind def} bind def
/ld {load def} bd
/bld {
dup length dict begin
{ null def } forall
bind
end
def
} bd
/dd { PDFVars 3 1 roll put } bd
/xdd { exch dd } bd
/Level2?
systemdict /languagelevel known
{ systemdict /languagelevel get 2 ge } { false } ifelse
def
/Level1? Level2? not def
/Level3?
systemdict /languagelevel known
{systemdict /languagelevel get 3 eq } { false } ifelse
def
/getifknown {
2 copy known { get true } { pop pop false } ifelse
} bd
/here {
currentdict exch getifknown
} bd
/isdefined? { where { pop true } { false } ifelse } bd
%%EndResource
%%BeginResource: procset pdf 6.0 1
%%Copyright: Copyright 1998-2003 Adobe Systems Incorporated. All Rights Reserved.
%%Title: General operators for PDF, common to all Language Levels.
/cm { matrix astore concat } bd
/d /setdash ld
/f /fill ld
/h /closepath ld
/i {dup 0 eq {pop _defaultflatness} if setflat} bd
/j /setlinejoin ld
/J /setlinecap ld
/M /setmiterlimit ld
/n /newpath ld
/S /stroke ld
/w /setlinewidth ld
/W /clip ld
/sg /setgray ld
/initgs {
0 setgray
[] 0 d
0 j
0 J
10 M
1 w
false setSA
/_defaulttransfer load settransfer
0 i
/RelativeColorimetric ri
newpath
} bd
/int {
dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul
exch pop add exch pop
} bd
/limit {
dup 2 index le { exch } if pop
dup 2 index ge { exch } if pop
} bd
/domainClip {
Domain aload pop 3 2 roll
limit
} [/Domain] bld
/applyInterpFunc {
0 1 DimOut 1 sub
{
dup C0 exch get exch
dup C1 exch get exch
3 1 roll
1 index sub
3 index
N exp mul add
exch
currentdict /Range_lo known
{
dup Range_lo exch get exch
Range_hi exch get
3 2 roll limit
}
{
pop
}
ifelse
exch
} for
pop
} [/DimOut /C0 /C1 /N /Range_lo /Range_hi] bld
/encodeInput {
NumParts 1 sub
0 1 2 index
{
dup Bounds exch get
2 index gt
{ exit }
{ dup
3 index eq
{ exit }
{ pop } ifelse
} ifelse
} for
3 2 roll pop
dup Bounds exch get exch
dup 1 add Bounds exch get exch
2 mul
dup Encode exch get exch
1 add Encode exch get
int
} [/NumParts /Bounds /Encode] bld
/rangeClip {
exch dup Range_lo exch get
exch Range_hi exch get
3 2 roll
limit
} [/Range_lo /Range_hi] bld
/applyStitchFunc {
Functions exch get exec
currentdict /Range_lo known {
0 1 DimOut 1 sub {
DimOut 1 add -1 roll
rangeClip
} for
} if
} [/Functions /Range_lo /DimOut] bld
/pdf_flushfilters
{
aload length
{ dup status
1 index currentfile ne and
{ dup flushfile closefile }
{ pop }
ifelse
} repeat
} bd
/pdf_readstring
{
1 index dup length 1 sub get
exch readstring pop
exch pdf_flushfilters
} bind def
/pdf_dictOp
{
3 2 roll
10 dict copy
begin
_Filters dup length 1 sub get def
currentdict exch exec
_Filters pdf_flushfilters
end
} [/_Filters] bld
/pdf_image {{image} /DataSource pdf_dictOp} bd
/pdf_imagemask {{imagemask} /DataSource pdf_dictOp} bd
/pdf_shfill {{sh} /DataSource pdf_dictOp} bd
/pdf_sethalftone {{sethalftone} /Thresholds pdf_dictOp} bd
/pdf_maskedImage
{
10 dict copy begin
/miDict currentdict def
/DataDict DataDict 10 dict copy def
DataDict begin
/DataSource
_Filters dup length 1 sub get
def
miDict image
_Filters pdf_flushfilters
end
MaskDict /DataSource get dup type /filetype eq { closefile } { pop } ifelse
end
} [/miDict /DataDict /_Filters] bld
/RadialShade {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/r2 exch def
/c2y exch def
/c2x exch def
/r1 exch def
/c1y exch def
/c1x exch def
/rampdict exch def
gsave
BBox length 0 gt {
newpath
BBox 0 get BBox 1 get moveto
BBox 2 get BBox 0 get sub 0 rlineto
0 BBox 3 get BBox 1 get sub rlineto
BBox 2 get BBox 0 get sub neg 0 rlineto
closepath
clip
newpath
} if
c1x c2x eq
{
c1y c2y lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope c2y c1y sub c2x c1x sub div def
/theta slope 1 atan def
c2x c1x lt c2y c1y ge and { /theta theta 180 sub def} if
c2x c1x lt c2y c1y lt and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
c1x c1y translate
theta rotate
-90 rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
/max { 2 copy gt { pop } {exch pop} ifelse } bind def
/min { 2 copy lt { pop } {exch pop} ifelse } bind def
rampdict begin
40 dict begin
background length 0 gt { background sssetbackground gsave clippath fill grestore } if
gsave
c1x c1y translate
theta rotate
-90 rotate
/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
/c1y 0 def
/c1x 0 def
/c2x 0 def
ext0 {
0 getrampcolor
c2y r2 add r1 sub 0.0001 lt
{
c1x c1y r1 360 0 arcn
pathbbox
/aymax exch def
/axmax exch def
/aymin exch def
/axmin exch def
/bxMin xMin axmin min def
/byMin yMin aymin min def
/bxMax xMax axmax max def
/byMax yMax aymax max def
bxMin byMin moveto
bxMax byMin lineto
bxMax byMax lineto
bxMin byMax lineto
bxMin byMin lineto
eofill
}
{
c2y r1 add r2 le
{
c1x c1y r1 0 360 arc
fill
}
{
c2x c2y r2 0 360 arc fill
r1 r2 eq
{
/p1x r1 neg def
/p1y c1y def
/p2x r1 def
/p2y c1y def
p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
fill
}
{
/AA r2 r1 sub c2y div def
AA -1 eq
{ /theta 89.99 def}
{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}
ifelse
/SS1 90 theta add dup sin exch cos div def
/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
/p1y p1x SS1 div neg def
/SS2 90 theta sub dup sin exch cos div def
/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
/p2y p2x SS2 div neg def
r1 r2 gt
{
/L1maxX p1x yMin p1y sub SS1 div add def
/L2maxX p2x yMin p2y sub SS2 div add def
}
{
/L1maxX 0 def
/L2maxX 0 def
}ifelse
p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
L1maxX L1maxX p1x sub SS1 mul p1y add lineto
fill
}
ifelse
}
ifelse
} ifelse
} if
c1x c2x sub dup mul
c1y c2y sub dup mul
add 0.5 exp
0 dtransform
dup mul exch dup mul add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
/hires exch def
hires mul
/numpix exch def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
/xInc c2x c1x sub numsteps div def
/yInc c2y c1y sub numsteps div def
/rInc r2 r1 sub numsteps div def
/cx c1x def
/cy c1y def
/radius r1 def
newpath
xInc 0 eq yInc 0 eq rInc 0 eq and and
{
0 getrampcolor
cx cy radius 0 360 arc
stroke
NumSamples 1 sub getrampcolor
cx cy radius 72 hires div add 0 360 arc
0 setlinewidth
stroke
}
{
0
numsteps
{
dup
subsampling { round } if
getrampcolor
cx cy radius 0 360 arc
/cx cx xInc add def
/cy cy yInc add def
/radius radius rInc add def
cx cy radius 360 0 arcn
eofill
rampIndxInc add
}
repeat
pop
} ifelse
ext1 {
c2y r2 add r1 lt
{
c2x c2y r2 0 360 arc
fill
}
{
c2y r1 add r2 sub 0.0001 le
{
c2x c2y r2 360 0 arcn
pathbbox
/aymax exch def
/axmax exch def
/aymin exch def
/axmin exch def
/bxMin xMin axmin min def
/byMin yMin aymin min def
/bxMax xMax axmax max def
/byMax yMax aymax max def
bxMin byMin moveto
bxMax byMin lineto
bxMax byMax lineto
bxMin byMax lineto
bxMin byMin lineto
eofill
}
{
c2x c2y r2 0 360 arc fill
r1 r2 eq
{
/p1x r2 neg def
/p1y c2y def
/p2x r2 def
/p2y c2y def
p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
fill
}
{
/AA r2 r1 sub c2y div def
AA -1 eq
{ /theta 89.99 def}
{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}
ifelse
/SS1 90 theta add dup sin exch cos div def
/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
/p1y c2y p1x SS1 div sub def
/SS2 90 theta sub dup sin exch cos div def
/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
/p2y c2y p2x SS2 div sub def
r1 r2 lt
{
/L1maxX p1x yMax p1y sub SS1 div add def
/L2maxX p2x yMax p2y sub SS2 div add def
}
{
/L1maxX 0 def
/L2maxX 0 def
}ifelse
p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
L1maxX L1maxX p1x sub SS1 mul p1y add lineto
fill
}
ifelse
}
ifelse
} ifelse
} if
grestore
grestore
end
end
end
} ifelse
} bd
/GenStrips {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/y2 exch def
/x2 exch def
/y1 exch def
/x1 exch def
/rampdict exch def
gsave
BBox length 0 gt {
newpath
BBox 0 get BBox 1 get moveto
BBox 2 get BBox 0 get sub 0 rlineto
0 BBox 3 get BBox 1 get sub rlineto
BBox 2 get BBox 0 get sub neg 0 rlineto
closepath
clip
newpath
} if
x1 x2 eq
{
y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope y2 y1 sub x2 x1 sub div def
/theta slope 1 atan def
x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if
x2 x1 lt y2 y1 lt and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
x1 y1 translate
theta rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background sssetbackground gsave clippath fill grestore } if
gsave
x1 y1 translate
theta rotate
/xStart 0 def
/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
/ySpan yMax yMin sub def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
xStart 0 transform
xEnd 0 transform
3 -1 roll
sub dup mul
3 1 roll
sub dup mul
add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
mul
/numpix exch def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
ext0 {
0 getrampcolor
xMin xStart lt
{ xMin yMin xMin neg ySpan rectfill } if
} if
/xInc xEnd xStart sub numsteps div def
/x xStart def
0
numsteps
{
dup
subsampling { round } if
getrampcolor
x yMin xInc ySpan rectfill
/x x xInc add def
rampIndxInc add
}
repeat
pop
ext1 {
xMax xEnd gt
{ xEnd yMin xMax xEnd sub ySpan rectfill } if
} if
grestore
grestore
end
end
end
} ifelse
} bd
/currentdistillerparams where { pop currentdistillerparams /CoreDistVersion get 5000 lt}{true}ifelse
{
/PDFMark5 {cleartomark} bd
}
{
/PDFMark5 {pdfmark} bd
}ifelse
/ReadByPDFMark5
{
2 dict begin
/makerString exch def string /tmpString exch def
{
currentfile tmpString readline pop
makerString anchorsearch
{
pop pop cleartomark exit
}
{
3 copy /PUT PDFMark5 pop 2 copy (\n) /PUT PDFMark5
} ifelse
}loop
end
}bd
%%EndResource
%%BeginResource: procset pdflev3 6.0 1
%%Copyright: Copyright 1987-2001,2003 Adobe Systems Incorporated. All Rights Reserved.
%%Title: PDF operators, with code specific for Level 3
/docinitialize {
PDF begin
/_defaulthalftone currenthalftone dd
/_defaultblackgeneration currentblackgeneration dd
/_defaultundercolorremoval currentundercolorremoval dd
/_defaultcolortransfer [currentcolortransfer] dd
/_defaulttransfer currenttransfer dd
end
PDFVars /docSetupDone true put
} bd
/_processColors
currentpagedevice /ProcessColorModel getifknown
{ << /DeviceGray [/Gray]
/DeviceRGB [/Red /Green /Blue]
/DeviceCMYK [/Cyan /Magenta /Yellow /Black]
/DeviceCMY [/Cyan /Magenta /Yellow]
/DeviceRGBK [/Red /Green /Blue /Black]
>> exch getifknown {} {[]} ifelse }
{[]}
ifelse
def
/initialize {
PDFVars /docSetupDone get
{
_defaulthalftone sethalftone
/_defaultblackgeneration load setblackgeneration
/_defaultundercolorremoval load setundercolorremoval
_defaultcolortransfer aload pop setcolortransfer
}if
false setoverprint
} bd
/terminate { } bd
/c /curveto ld
/cs /setcolorspace ld
/l /lineto ld
/m /moveto ld
/q /gsave ld
/Q /grestore ld
/sc /setcolor ld
/setSA/setstrokeadjust ld
/re {
4 2 roll m
1 index 0 rlineto
0 exch rlineto
neg 0 rlineto
h
} bd
/rssds
{
/Shading get /DataSource get resetfile
} bd
/sh
{ dup /DataSource known
{ dup begin
DataSource type /filetype eq { DataSource resetfile } if
end
} if
shfill
} [/DataSource] bld
/concattransferfuncs {
[ 3 1 roll /exec load exch /exec load ] cvx
} bd
/concatandsettransfer {
/_defaulttransfer load concattransferfuncs settransfer
} bd
/concatandsetcolortransfer {
_defaultcolortransfer aload pop
8 -1 roll 5 -1 roll concattransferfuncs 7 1 roll
6 -1 roll 4 -1 roll concattransferfuncs 5 1 roll
4 -1 roll 3 -1 roll concattransferfuncs 3 1 roll
concattransferfuncs
setcolortransfer
} bd
/defineRes/defineresource ld
/undefineRes/undefineresource ld
/findRes/findresource ld
currentglobal
true systemdict /setglobal get exec
[/Function /ExtGState /Form /Shading /FunctionDictionary /MadePattern /PatternPrototype /DataSource /Image]
{ /Generic /Category findresource dup length dict copy /Category defineresource pop }
forall
systemdict /setglobal get exec
/ri {
/findcolorrendering isdefined?
{
mark exch
findcolorrendering
counttomark 2 eq
{ type /booleantype eq
{ dup type /nametype eq
{ dup /ColorRendering resourcestatus
{ pop pop
dup /DefaultColorRendering ne
{
/ColorRendering findresource
setcolorrendering
} if
} if
} if
} if
} if
cleartomark
}
{ pop
} ifelse
} bd
/CMYKDeviceNColorspaces [
[/Separation /None /DeviceCMYK {0 0 0}] bind
[/Separation (Black)
/DeviceCMYK {0 0 0 4 -1 roll}] bind
[/Separation (Yellow)
/DeviceCMYK {0 0 3 -1 roll 0}] bind
[/DeviceN [(Yellow) (Black)]
/DeviceCMYK {0 0 4 2 roll}] bind
[/Separation (Magenta)
/DeviceCMYK {0 exch 0 0}] bind
[/DeviceN [(Magenta) (Black)]
/DeviceCMYK {0 3 1 roll 0 exch}] bind
[/DeviceN [(Magenta) (Yellow)]
/DeviceCMYK {0 3 1 roll 0}] bind
[/DeviceN [(Magenta) (Yellow) (Black)]
/DeviceCMYK {0 4 1 roll}] bind
[/Separation (Cyan)
/DeviceCMYK {0 0 0}] bind
[/DeviceN [(Cyan) (Black)]
/DeviceCMYK {0 0 3 -1 roll}] bind
[/DeviceN [(Cyan) (Yellow)]
/DeviceCMYK {0 exch 0}] bind
[/DeviceN [(Cyan) (Yellow) (Black)]
/DeviceCMYK {0 3 1 roll}] bind
[/DeviceN [(Cyan) (Magenta)]
/DeviceCMYK {0 0}] bind
[/DeviceN [(Cyan) (Magenta) (Black)]
/DeviceCMYK {0 exch}] bind
[/DeviceN [(Cyan) (Magenta) (Yellow)]
/DeviceCMYK {0}] bind
[/DeviceCMYK] bind
] def
/nzopmsc {
6 dict begin
/kk exch def
/yy exch def
/mm exch def
/cc exch def
/sum 0 def
cc 0 ne {/sum sum 2#1000 or def cc} if
mm 0 ne {/sum sum 2#0100 or def mm} if
yy 0 ne {/sum sum 2#0010 or def yy} if
kk 0 ne {/sum sum 2#0001 or def kk} if
CMYKDeviceNColorspaces sum get setcolorspace
sum 0 eq {0} if
end
setcolor
} [/cc /mm /yy /kk /sum] bld
/every? {
true
3 2 roll
{ 2 index exec not {pop false exit} if } forall
exch pop
} bd
/knownColorants? {
3 dict begin
/colorants exch def
{
/DeviceN /ColorSpaceFamily findresource pop
/cpd currentpagedevice def
/dc 10 dict def
cpd /SeparationColorNames getifknown
{ { dc exch 0 put } forall } if
_processColors { dc exch 0 put } forall
colorants {dc exch known} every?
} stopped
{ false }
if
end
} [/colorants /dc /cpd] bld
/getrampcolor {
cvi
/indx exch def
0 1 NumComp 1 sub {
dup
Samples exch get
dup type /stringtype eq { indx get } if
exch
Scaling exch get aload pop
3 1 roll
mul add
} for
setcolor
} bd
%%EndResource
%%BeginResource: procset pdftext 6.0 1
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Text operators for PDF
PDF /PDFText 78 dict dup begin put
/docinitialize
{
/resourcestatus where {
pop
/CIDParams /ProcSet resourcestatus {
pop pop
false /CIDParams /ProcSet findresource /SetBuildCompatible get exec
} if
} if
PDF begin
PDFText /_pdfDefineIdentity-H known
{ PDFText /_pdfDefineIdentity-H get exec}
if
end
} bd
/initialize {
PDFText begin
} bd
/terminate { end } bd
Level2?
{
/_safeput
{
3 -1 roll load 3 1 roll put
}
bd
}
{
/_safeput
{
2 index load dup dup length exch maxlength ge
{ dup length 5 add dict copy
3 index xdd
}
{ pop }
ifelse
3 -1 roll load 3 1 roll put
}
bd
}
ifelse
/pdf_has_composefont? systemdict /composefont known def
/CopyFont {
{
1 index /FID ne 2 index /UniqueID ne and
{ def } { pop pop } ifelse
} forall
} bd
/Type0CopyFont
{
exch
dup length dict
begin
CopyFont
[
exch
FDepVector
{
dup /FontType get 0 eq
{
1 index Type0CopyFont
/_pdfType0 exch definefont
}
{
/_pdfBaseFont exch
2 index exec
}
ifelse
exch
}
forall
pop
]
/FDepVector exch def
currentdict
end
} bd
Level2? {currentglobal true setglobal} if
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
Level2? {setglobal} if
/modEnc {
/_enc xdd
/_icode 0 dd
counttomark 1 sub -1 0
{
index
dup type /nametype eq
{
_enc _icode 3 -1 roll put
_icode 1 add
}
if
/_icode xdd
} for
cleartomark
_enc
} bd
/trEnc {
/_enc xdd
255 -1 0 {
exch dup -1 eq
{ pop /.notdef }
{ Encoding exch get }
ifelse
_enc 3 1 roll put
} for
pop
_enc
} bd
/TE {
/_i xdd
StandardEncoding 256 array copy modEnc
_pdfEncodings exch _i exch put
} bd
Level2?
{
/pdfPatchCStrings
{
currentdict /CharStrings known currentdict /FontType known and
{
FontType 1 eq CharStrings type /dicttype eq and
{
CharStrings /mu known CharStrings /mu1 known not and CharStrings wcheck and
{
CharStrings /mu get
type /stringtype eq
{
currentglobal
CharStrings /mu1
CharStrings /mu get
dup gcheck setglobal
dup length string copy
put
setglobal
} if
} if
} if
} if
} bd
}
{ /pdfPatchCStrings {} bd }
ifelse
/TZ
{
/_usePDFEncoding xdd
findfont
dup length 6 add dict
begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
pdfPatchCStrings
/pdf_origFontName FontName def
/FontName exch def
currentdict /PaintType known
{ PaintType 2 eq {/PaintType 0 def} if }
if
_usePDFEncoding 0 ge
{
/Encoding _pdfEncodings _usePDFEncoding get def
pop
}
{
_usePDFEncoding -1 eq
{
counttomark 0 eq
{ pop }
{
Encoding 256 array copy
modEnc /Encoding exch def
}
ifelse
}
{
256 array
trEnc /Encoding exch def
}
ifelse
}
ifelse
pdf_EuroProcSet pdf_origFontName known
{
pdf_origFontName pdf_AddEuroGlyphProc
} if
Level2?
{
currentdict /pdf_origFontName undef
} if
FontName currentdict
end
definefont pop
}
bd
Level2?
{
/TZG
{
currentglobal true setglobal
2 index _pdfFontStatus
{
2 index findfont
false setglobal
3 index findfont
true setglobal
ne
{
2 index findfont dup rcheck
{
dup length dict begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
pdfPatchCStrings
currentdict end
}
if
3 index exch definefont pop
}
if
} if
setglobal
TZ
} bd
}
{
/TZG {TZ} bd
} ifelse
Level2?
{
currentglobal false setglobal
userdict /pdftext_data 5 dict put
pdftext_data
begin
/saveStacks
{
pdftext_data
begin
/vmmode currentglobal def
false setglobal
count array astore /os exch def
end
countdictstack array dictstack pdftext_data exch /ds exch put
cleardictstack pdftext_data /dscount countdictstack put
pdftext_data /vmmode get setglobal
} bind def
/restoreStacks
{
pdftext_data /vmmode currentglobal put false setglobal
clear cleardictstack
pdftext_data /ds get dup
pdftext_data /dscount get 1 2 index length 1 sub
{ get begin dup } for
pop pop
pdftext_data /os get aload pop
pdftext_data /vmmode get setglobal
} bind def
/testForClonePrinterBug
{
currentglobal true setglobal
/undefinedCategory /Generic /Category findresource
dup length dict copy /Category defineresource pop
setglobal
pdftext_data /saveStacks get exec
pdftext_data /vmmode currentglobal put false setglobal
/undefined /undefinedCategory { resourcestatus } stopped
pdftext_data exch /bugFound exch put
pdftext_data /vmmode get setglobal
pdftext_data /restoreStacks get exec
pdftext_data /bugFound get
} bind def
end
setglobal
/pdf_resourcestatus
pdftext_data /testForClonePrinterBug get exec
{
{
pdftext_data /saveStacks get exec
pdftext_data /os get dup dup length 1 sub
dup 1 sub dup 0 lt { pop 0 } if
exch 1 exch { get exch dup } for
pop pop
{ resourcestatus }
stopped
{
clear cleardictstack pdftext_data /restoreStacks get exec
{ pop pop } stopped pop false
}
{
count array astore pdftext_data exch /results exch put
pdftext_data /restoreStacks get exec pop pop
pdftext_data /results get aload pop
}
ifelse
}
}
{ { resourcestatus } }
ifelse
bd
}
if
Level2?
{
/_pdfUndefineResource
{
currentglobal 3 1 roll
_pdf_FontDirectory 2 index 2 copy known
{undef}
{pop pop}
ifelse
1 index (pdf) exch _pdfConcatNames 1 index
1 index 1 _pdfConcatNames 1 index
5 index 1 _pdfConcatNames 1 index
4
{
2 copy pdf_resourcestatus
{
pop 2 lt
{2 copy findresource gcheck setglobal undefineresource}
{pop pop}
ifelse
}
{ pop pop}
ifelse
} repeat
setglobal
} bd
}
{
/_pdfUndefineResource { pop pop} bd
}
ifelse
Level2?
{
/_pdfFontStatus
{
currentglobal exch
/Font pdf_resourcestatus
{pop pop true}
{false}
ifelse
exch setglobal
} bd
}
{
/_pdfFontStatusString 50 string def
_pdfFontStatusString 0 (fonts/) putinterval
/_pdfFontStatus
{
FontDirectory 1 index known
{ pop true }
{
_pdfFontStatusString 6 42 getinterval
cvs length 6 add
_pdfFontStatusString exch 0 exch getinterval
{ status } stopped
{pop false}
{
{ pop pop pop pop true}
{ false }
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
Level2?
{
/_pdfCIDFontStatus
{
/CIDFont /Category pdf_resourcestatus
{
pop pop
/CIDFont pdf_resourcestatus
{pop pop true}
{false}
ifelse
}
{ pop false }
ifelse
} bd
}
if
/_pdfString100 100 string def
/_pdfComposeFontName
{
dup length 1 eq
{
0 get
1 index
type /nametype eq
{
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
2 index exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
exch pop
true
}
{
pop pop
false
}
ifelse
}
{
false
}
ifelse
dup {exch cvn exch} if
} bd
/_pdfConcatNames
{
exch
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
3 -1 roll exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
cvn
} bind def
/_pdfTextTempString 50 string def
/_pdfRegOrderingArray [(Adobe-Japan1) (Adobe-CNS1) (Adobe-Korea1) (Adobe-GB1)] def
/_pdf_CheckCIDSystemInfo
{
1 index _pdfTextTempString cvs
(Identity) anchorsearch
{
pop pop pop pop true
}
{
false
_pdfRegOrderingArray
{
2 index exch
anchorsearch
{ pop pop pop true exit}
{ pop }
ifelse
}
forall
exch pop
exch /CIDFont findresource
/CIDSystemInfo get
3 -1 roll /CMap findresource
/CIDSystemInfo get
exch
3 -1 roll
{
2 copy
/Supplement get
exch
dup type /dicttype eq
{/Supplement get}
{pop 0 }
ifelse
ge
}
{ true }
ifelse
{
dup /Registry get
2 index /Registry get eq
{
/Ordering get
exch /Ordering get
dup type /arraytype eq
{
1 index type /arraytype eq
{
true
1 index length 1 sub -1 0
{
dup 2 index exch get exch 3 index exch get ne
{ pop false exit}
if
} for
exch pop exch pop
}
{ pop pop false }
ifelse
}
{
eq
}
ifelse
}
{ pop pop false }
ifelse
}
{ pop pop false }
ifelse
}
ifelse
} bind def
pdf_has_composefont?
{
/_pdfComposeFont
{
2 copy _pdfComposeFontName not
{
2 index
}
if
(pdf) exch _pdfConcatNames
dup _pdfFontStatus
{ dup findfont 5 2 roll pop pop pop true}
{
4 1 roll
1 index /CMap pdf_resourcestatus
{
pop pop
true
}
{false}
ifelse
1 index true exch
{
_pdfCIDFontStatus not
{pop false exit}
if
}
forall
and
{
1 index 1 index 0 get _pdf_CheckCIDSystemInfo
{
3 -1 roll pop
2 index 3 1 roll
composefont true
}
{
pop pop exch pop false
}
ifelse
}
{
_pdfComposeFontName
{
dup _pdfFontStatus
{
exch pop
1 index exch
findfont definefont true
}
{
pop exch pop
false
}
ifelse
}
{
exch pop
false
}
ifelse
}
ifelse
{ true }
{
dup _pdfFontStatus
{ dup findfont true }
{ pop false }
ifelse
}
ifelse
}
ifelse
} bd
}
{
/_pdfComposeFont
{
_pdfComposeFontName not
{
dup
}
if
dup
_pdfFontStatus
{exch pop dup findfont true}
{
1 index
dup type /nametype eq
{pop}
{cvn}
ifelse
eq
{pop false}
{
dup _pdfFontStatus
{dup findfont true}
{pop false}
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
/_pdfStyleDicts 4 dict dup begin
/Adobe-Japan1 4 dict dup begin
Level2?
{
/Serif
/HeiseiMin-W3-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMin-W3}
{
/HeiseiMin-W3 _pdfCIDFontStatus
{/HeiseiMin-W3}
{/Ryumin-Light}
ifelse
}
ifelse
def
/SansSerif
/HeiseiKakuGo-W5-83pv-RKSJ-H _pdfFontStatus
{/HeiseiKakuGo-W5}
{
/HeiseiKakuGo-W5 _pdfCIDFontStatus
{/HeiseiKakuGo-W5}
{/GothicBBB-Medium}
ifelse
}
ifelse
def
/HeiseiMaruGo-W4-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMaruGo-W4}
{
/HeiseiMaruGo-W4 _pdfCIDFontStatus
{/HeiseiMaruGo-W4}
{
/Jun101-Light-RKSJ-H _pdfFontStatus
{ /Jun101-Light }
{ SansSerif }
ifelse
}
ifelse
}
ifelse
/RoundSansSerif exch def
/Default Serif def
}
{
/Serif /Ryumin-Light def
/SansSerif /GothicBBB-Medium def
{
(fonts/Jun101-Light-83pv-RKSJ-H) status
}stopped
{pop}{
{ pop pop pop pop /Jun101-Light }
{ SansSerif }
ifelse
/RoundSansSerif exch def
}ifelse
/Default Serif def
}
ifelse
end
def
/Adobe-Korea1 4 dict dup begin
/Serif /HYSMyeongJo-Medium def
/SansSerif /HYGoThic-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-GB1 4 dict dup begin
/Serif /STSong-Light def
/SansSerif /STHeiti-Regular def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-CNS1 4 dict dup begin
/Serif /MKai-Medium def
/SansSerif /MHei-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
end
def
/TZzero
{
/_wmode xdd
/_styleArr xdd
/_regOrdering xdd
3 copy
_pdfComposeFont
{
5 2 roll pop pop pop
}
{
[
0 1 _styleArr length 1 sub
{
_styleArr exch get
_pdfStyleDicts _regOrdering 2 copy known
{
get
exch 2 copy known not
{ pop /Default }
if
get
}
{
pop pop pop /Unknown
}
ifelse
}
for
]
exch pop
2 index 3 1 roll
_pdfComposeFont
{3 -1 roll pop}
{
findfont dup /FontName get exch
}
ifelse
}
ifelse
dup /WMode 2 copy known
{ get _wmode ne }
{ pop pop _wmode 1 eq}
ifelse
{
exch _wmode _pdfConcatNames
dup _pdfFontStatus
{ exch pop dup findfont false}
{ exch true }
ifelse
}
{
dup /FontType get 0 ne
}
ifelse
{
dup /FontType get 3 eq _wmode 1 eq and
{
_pdfVerticalRomanT3Font dup length 10 add dict copy
begin
/_basefont exch
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put dup 16#a5 /yen put dup 16#b4 /yen put}
if
def
FontName
currentdict
end
definefont
def
/Encoding _basefont /Encoding get def
/_fauxfont true def
}
{
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
FontType 0 ne
{
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put}
if
def
/_fauxfont true def
} if
} ifelse
/WMode _wmode def
dup dup /FontName exch def
currentdict
end
definefont pop
}
{
pop
}
ifelse
/_pdf_FontDirectory 3 1 roll _safeput
}
bd
Level2?
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
selectfont
} bd
}
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
exch findfont exch
dup type /arraytype eq
{makefont}
{scalefont}
ifelse
setfont
} bd
}
ifelse
/cshow where
{
pop /pdf_cshow /cshow load dd
/pdf_remove2 {pop pop} dd
}
{
/pdf_cshow {exch forall} dd
/pdf_remove2 {} dd
} ifelse
/pdf_xshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_yshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0 exch
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_xyshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
{_pdf_na _pdf_i 1 add get} stopped
{ pop pop pop}
{
_pdf_x _pdf_y moveto
rmoveto
}
ifelse
}
ifelse
_pdf_i 2 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdfl1xs {/_pdf_showproc /show load dd pdf_xshow} bd
/pdfl1ys {/_pdf_showproc /show load dd pdf_yshow} bd
/pdfl1xys {/_pdf_showproc /show load dd pdf_xyshow} bd
Level2? _ColorSep5044? not and
{
/pdfxs {{xshow} stopped {pdfl1xs} if} bd
/pdfys {{yshow} stopped {pdfl1ys} if} bd
/pdfxys {{xyshow} stopped {pdfl1xys} if} bd
}
{
/pdfxs /pdfl1xs load dd
/pdfys /pdfl1ys load dd
/pdfxys /pdfl1xys load dd
} ifelse
/pdf_charpath {false charpath} bd
/pdf_xcharpath {/_pdf_showproc /pdf_charpath load dd pdf_xshow} bd
/pdf_ycharpath {/_pdf_showproc /pdf_charpath load dd pdf_yshow} bd
/pdf_xycharpath {/_pdf_showproc /pdf_charpath load dd pdf_xyshow} bd
/pdf_strokepath
{
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 false charpath
currentpoint S moveto
} bind
exch pdf_cshow
} bd
/pdf_xstrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_xshow} bd
/pdf_ystrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_yshow} bd
/pdf_xystrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_xyshow} bd
Level2? {currentglobal true setglobal} if
/d0/setcharwidth ld
/nND {{/.notdef} repeat} bd
/T3Defs {
/BuildChar
{
1 index /Encoding get exch get
1 index /BuildGlyph get exec
}
def
/BuildGlyph {
exch begin
GlyphProcs exch get exec
end
} def
/_pdfT3Font true def
} bd
/_pdfBoldRomanWidthProc
{
stringwidth 1 index 0 ne { exch .03 add exch }if setcharwidth
0 0
} bd
/_pdfType0WidthProc
{
dup stringwidth 0 0 moveto
2 index true charpath pathbbox
0 -1
7 index 2 div .88
setcachedevice2
pop
0 0
} bd
/_pdfType0WMode1WidthProc
{
dup stringwidth
pop 2 div neg -0.88
2 copy
moveto
0 -1
5 -1 roll true charpath pathbbox
setcachedevice
} bd
/_pdfBoldBaseFont
11 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding cHexEncoding def
/_setwidthProc /_pdfBoldRomanWidthProc load def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
pdf_has_composefont?
{
/_pdfBoldBaseCIDFont
11 dict begin
/CIDFontType 1 def
/CIDFontName /_pdfBoldBaseCIDFont def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_setwidthProc /_pdfType0WidthProc load def
/_bcstr2 2 string def
/BuildGlyph
{
exch begin
_basefont setfont
_bcstr2 1 2 index 256 mod put
_bcstr2 0 3 -1 roll 256 idiv put
_bcstr2 dup _setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
/_pdfDefineIdentity-H
{
/Identity-H /CMap PDFText /pdf_resourcestatus get exec
{
pop pop
}
{
/CIDInit/ProcSet findresource begin 12 dict begin
begincmap
/CIDSystemInfo
3 dict begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
currentdict
end
def
/CMapName /Identity-H def
/CMapVersion 1 def
/CMapType 1 def
1 begincodespacerange
<0000> <ffff>
endcodespacerange
1 begincidrange
<0000> <ffff> 0
endcidrange
endcmap
CMapName currentdict/CMap defineresource pop
end
end
} ifelse
} def
} if
/_pdfVerticalRomanT3Font
10 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_pdfType0WidthProc
moveto
show
end
}bd
currentdict
end
def
Level2? {setglobal} if
/MakeBoldFont
{
dup /ct_SyntheticBold known
{
dup length 3 add dict begin
CopyFont
/ct_StrokeWidth .03 0 FontMatrix idtransform pop def
/ct_SyntheticBold true def
currentdict
end
definefont
}
{
dup dup length 3 add dict
begin
CopyFont
/PaintType 2 def
/StrokeWidth .03 0 FontMatrix idtransform pop def
/dummybold currentdict
end
definefont
dup /FontType get dup 9 ge exch 11 le and
{
_pdfBoldBaseCIDFont
dup length 3 add dict copy begin
dup /CIDSystemInfo get /CIDSystemInfo exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefont exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefonto exch def
currentdict
end
/CIDFont defineresource
}
{
_pdfBoldBaseFont
dup length 3 add dict copy begin
/_basefont exch def
/_basefonto exch def
currentdict
end
definefont
}
ifelse
}
ifelse
} bd
/MakeBold {
1 index
_pdf_FontDirectory 2 index 2 copy known
{get}
{exch pop}
ifelse
findfont
dup
/FontType get 0 eq
{
dup /WMode known {dup /WMode get 1 eq }{false} ifelse
version length 4 ge
and
{version 0 4 getinterval cvi 2015 ge }
{true}
ifelse
{/_pdfType0WidthProc}
{/_pdfType0WMode1WidthProc}
ifelse
_pdfBoldBaseFont /_setwidthProc 3 -1 roll load put
{MakeBoldFont} Type0CopyFont definefont
}
{
dup /_fauxfont known not 1 index /SubstMaster known not and
{
_pdfBoldBaseFont /_setwidthProc /_pdfBoldRomanWidthProc load put
MakeBoldFont
}
{
2 index 2 index eq
{ exch pop }
{
dup length dict begin
CopyFont
currentdict
end
definefont
}
ifelse
}
ifelse
}
ifelse
pop pop
dup /dummybold ne
{/_pdf_FontDirectory exch dup _safeput }
{ pop }
ifelse
}bd
/MakeItalic {
_pdf_FontDirectory exch 2 copy known
{get}
{exch pop}
ifelse
dup findfont
dup /FontInfo 2 copy known
{
get
/ItalicAngle 2 copy known
{get 0 eq }
{ pop pop true}
ifelse
}
{ pop pop true}
ifelse
{
exch pop
dup /FontType get 0 eq Level2? not and
{ dup /FMapType get 6 eq }
{ false }
ifelse
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1Type0 }
{ _italMtxType0 }
ifelse
}
{ pop pop _italMtxType0 }
ifelse
}
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1 }
{ _italMtx }
ifelse
}
{ pop pop _italMtx }
ifelse
}
ifelse
makefont
dup /FontType get 42 eq Level2? not or
{
dup length dict begin
CopyFont
currentdict
end
}
if
1 index exch
definefont pop
/_pdf_FontDirectory exch dup _safeput
}
{
pop
2 copy ne
{
/_pdf_FontDirectory 3 1 roll _safeput
}
{ pop pop }
ifelse
}
ifelse
}bd
/MakeBoldItalic {
/dummybold exch
MakeBold
/dummybold
MakeItalic
}bd
Level2?
{
/pdf_CopyDict
{1 index length add dict copy}
def
}
{
/pdf_CopyDict
{
1 index length add dict
1 index wcheck
{ copy }
{ begin
{def} forall
currentdict
end
}
ifelse
}
def
}
ifelse
/pdf_AddEuroGlyphProc
{
currentdict /CharStrings known
{
CharStrings /Euro known not
{
dup
/CharStrings
CharStrings 1 pdf_CopyDict
begin
/Euro pdf_EuroProcSet 4 -1 roll get def
currentdict
end
def
/pdf_PSBuildGlyph /pdf_PSBuildGlyph load def
/pdf_PathOps /pdf_PathOps load def
/Symbol eq Encoding 160 get /.notdef eq and
{
/Encoding Encoding dup length array copy
dup 160 /Euro put def
}
if
}
{ pop
}
ifelse
}
{ pop
}
ifelse
}
def
Level2? {currentglobal true setglobal} if
/pdf_PathOps 4 dict dup begin
/m {moveto} def
/l {lineto} def
/c {curveto} def
/cp {closepath} def
end
def
/pdf_PSBuildGlyph
{
gsave
8 -1 roll pop
7 1 roll
currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse
dup 9 1 roll
{
currentdict /StrokeWidth 2 copy known
{
get 2 div
5 1 roll
4 -1 roll 4 index sub
4 1 roll
3 -1 roll 4 index sub
3 1 roll
exch 4 index add exch
4 index add
5 -1 roll pop
}
{
pop pop
}
ifelse
}
if
setcachedevice
pdf_PathOps begin
exec
end
{
currentdict /StrokeWidth 2 copy known
{ get }
{ pop pop 0 }
ifelse
setlinewidth stroke
}
{
fill
}
ifelse
grestore
} def
/pdf_EuroProcSet 13 dict def
pdf_EuroProcSet
begin
/Courier-Bold
{
600 0 6 -12 585 612
{
385 274 m
180 274 l
179 283 179 293 179 303 c
179 310 179 316 180 323 c
398 323 l
423 404 l
197 404 l
219 477 273 520 357 520 c
409 520 466 490 487 454 c
487 389 l
579 389 l
579 612 l
487 612 l
487 560 l
449 595 394 612 349 612 c
222 612 130 529 98 404 c
31 404 l
6 323 l
86 323 l
86 304 l
86 294 86 284 87 274 c
31 274 l
6 193 l
99 193 l
129 77 211 -12 359 -12 c
398 -12 509 8 585 77 c
529 145 l
497 123 436 80 356 80 c
285 80 227 122 198 193 c
360 193 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-BoldOblique /Courier-Bold load def
/Courier
{
600 0 17 -12 578 584
{
17 204 m
97 204 l
126 81 214 -12 361 -12 c
440 -12 517 17 578 62 c
554 109 l
501 70 434 43 366 43 c
266 43 184 101 154 204 c
380 204 l
400 259 l
144 259 l
144 270 143 281 143 292 c
143 299 143 307 144 314 c
418 314 l
438 369 l
153 369 l
177 464 249 529 345 529 c
415 529 484 503 522 463 c
522 391 l
576 391 l
576 584 l
522 584 l
522 531 l
473 566 420 584 348 584 c
216 584 122 490 95 369 c
37 369 l
17 314 l
87 314 l
87 297 l
87 284 88 272 89 259 c
37 259 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-Oblique /Courier load def
/Helvetica
{
556 0 24 -19 541 703
{
541 628 m
510 669 442 703 354 703 c
201 703 117 607 101 444 c
50 444 l
25 372 l
97 372 l
97 301 l
49 301 l
24 229 l
103 229 l
124 67 209 -19 350 -19 c
435 -19 501 25 509 32 c
509 131 l
492 105 417 60 343 60 c
267 60 204 127 197 229 c
406 229 l
430 301 l
191 301 l
191 372 l
455 372 l
479 444 l
194 444 l
201 531 245 624 348 624 c
433 624 484 583 509 534 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-Oblique /Helvetica load def
/Helvetica-Bold
{
556 0 12 -19 563 710
{
563 621 m
537 659 463 710 363 710 c
216 710 125 620 101 462 c
51 462 l
12 367 l
92 367 l
92 346 l
92 337 93 328 93 319 c
52 319 l
12 224 l
102 224 l
131 58 228 -19 363 -19 c
417 -19 471 -12 517 18 c
517 146 l
481 115 426 93 363 93 c
283 93 254 166 246 224 c
398 224 l
438 319 l
236 319 l
236 367 l
457 367 l
497 462 l
244 462 l
259 552 298 598 363 598 c
425 598 464 570 486 547 c
507 526 513 517 517 509 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-BoldOblique /Helvetica-Bold load def
/Symbol
{
750 0 20 -12 714 685
{
714 581 m
650 645 560 685 465 685 c
304 685 165 580 128 432 c
50 432 l
20 369 l
116 369 l
115 356 115 347 115 337 c
115 328 115 319 116 306 c
50 306 l
20 243 l
128 243 l
165 97 300 -12 465 -12 c
560 -12 635 25 685 65 c
685 155 l
633 91 551 51 465 51 c
340 51 238 131 199 243 c
555 243 l
585 306 l
184 306 l
183 317 182 326 182 336 c
182 346 183 356 184 369 c
614 369 l 644 432 l
199 432 l
233 540 340 622 465 622 c
555 622 636 580 685 520 c
cp
750 0 m
}
pdf_PSBuildGlyph
} def
/Times-Bold
{
500 0 16 -14 478 700
{
367 308 m
224 308 l
224 368 l
375 368 l
380 414 l
225 414 l
230 589 257 653 315 653 c
402 653 431 521 444 457 c
473 457 l
473 698 l
444 697 l
441 679 437 662 418 662 c
393 662 365 700 310 700 c
211 700 97 597 73 414 c
21 414 l
16 368 l
69 368 l
69 359 68 350 68 341 c
68 330 68 319 69 308 c
21 308 l
16 262 l
73 262 l
91 119 161 -14 301 -14 c
380 -14 443 50 478 116 c
448 136 l
415 84 382 40 323 40 c
262 40 231 77 225 262 c
362 262 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-BoldItalic
{
500 0 9 -20 542 686
{
542 686 m
518 686 l
513 673 507 660 495 660 c
475 660 457 683 384 683 c
285 683 170 584 122 430 c
58 430 l
34 369 l
105 369 l
101 354 92 328 90 312 c
34 312 l
9 251 l
86 251 l
85 238 84 223 84 207 c
84 112 117 -14 272 -14 c
326 -14 349 9 381 9 c
393 9 393 -10 394 -20 c
420 -20 l
461 148 l
429 148 l
416 109 362 15 292 15 c
227 15 197 55 197 128 c
197 162 204 203 216 251 c
378 251 l
402 312 l
227 312 l
229 325 236 356 241 369 c
425 369 l
450 430 l
255 430 l
257 435 264 458 274 488 c
298 561 337 654 394 654 c
437 654 484 621 484 530 c
484 516 l
516 516 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Italic
{
500 0 23 -10 595 692
{
399 317 m
196 317 l
199 340 203 363 209 386 c
429 386 l
444 424 l
219 424 l
246 514 307 648 418 648 c
448 648 471 638 492 616 c
529 576 524 529 527 479 c
549 475 l
595 687 l
570 687 l
562 674 558 664 542 664 c
518 664 474 692 423 692 c
275 692 162 551 116 424 c
67 424 l
53 386 l
104 386 l
98 363 93 340 90 317 c
37 317 l
23 279 l
86 279 l
85 266 85 253 85 240 c
85 118 137 -10 277 -10 c
370 -10 436 58 488 128 c
466 149 l
424 101 375 48 307 48 c
212 48 190 160 190 234 c
190 249 191 264 192 279 c
384 279 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Roman
{
500 0 10 -12 484 692
{
347 298 m
171 298 l
170 310 170 322 170 335 c
170 362 l
362 362 l
374 403 l
172 403 l
184 580 244 642 308 642 c
380 642 434 574 457 457 c
481 462 l
474 691 l
449 691 l
433 670 429 657 410 657 c
394 657 360 692 299 692 c
204 692 94 604 73 403 c
22 403 l
10 362 l
70 362 l
69 352 69 341 69 330 c
69 319 69 308 70 298 c
22 298 l
10 257 l
73 257 l
97 57 216 -12 295 -12 c
364 -12 427 25 484 123 c
458 142 l
425 101 384 37 316 37 c
256 37 189 84 173 257 c
335 257 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
end
Level2? {setglobal} if
currentdict readonly pop end
%%EndResource
PDFText begin
[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
0 TE
[1/dotlessi/caron 39/quotesingle 96/grave 
127/bullet/Euro/bullet/quotesinglbase/florin/quotedblbase/ellipsis
/dagger/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE
/bullet/Zcaron/bullet/bullet/quoteleft/quoteright/quotedblleft
/quotedblright/bullet/endash/emdash/tilde/trademark/scaron
/guilsinglright/oe/bullet/zcaron/Ydieresis/space/exclamdown/cent/sterling
/currency/yen/brokenbar/section/dieresis/copyright/ordfeminine
/guillemotleft/logicalnot/hyphen/registered/macron/degree/plusminus
/twosuperior/threesuperior/acute/mu/paragraph/periodcentered/cedilla
/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash
/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave
/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute
/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde
/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute
/ucircumflex/udieresis/yacute/thorn/ydieresis
1 TE
end
%%BeginResource: procset pdfasc.prc 6.0 1
%%Copyright: Copyright 1992-2003 Adobe Systems Incorporated. All Rights Reserved.
/ASR {
13 dict begin
/mirV? exch def
/mirH? exch def
/center? exch def
/autorotate? exch def
/angle exch def
/shrink exch def
/Pury exch def
/Purx exch def
/Plly exch def
/Pllx exch def
/Dury exch def
/Durx exch def
/Dlly exch def
/Dllx exch def
Dury 0 eq Durx 0 eq and Dlly 0 eq Dllx 0 eq and and
{ shrink 0 gt { GClipBBox } { GPageBBox } ifelse }
{ ITransDBBox }
ifelse
/PHt Pury Plly sub def
/PW Purx Pllx sub def
/DHt Dury Dlly sub def
/DW Durx Dllx sub def
angle 90 eq angle 270 eq or
{
PHt /PHt PW def /PW exch def
} if
autorotate? PHt PW ne and DHt DW ne and
{
DHt DW ge
PHt PW ge
ne
{ /angle angle 90 add def
PHt /PHt PW def /PW exch def
}
if
} if
angle 0 ne
{
/angle angle 360 mod def
angle rotate
angle 90 eq
{ 0 DW neg translate }
if
angle 180 eq
{ DW neg DHt neg translate }
if
angle 270 eq
{ DHt neg 0 translate }
if
} if
center?
{
ITransBBox
Durx Dllx add 2 div Dury Dlly add 2 div
Purx Pllx add -2 div Pury Plly add -2 div
3 -1 roll add exch
3 -1 roll add exch
translate
}
{
ITransBBox
angle 0 eq
{Dllx Pllx sub Dury Pury sub}
if
angle 90 eq
{Durx Purx sub Dury Pury sub}
if
angle 180 eq
{Durx Purx sub Dlly Plly sub}
if
angle 270 eq
{Dllx Pllx sub Dlly Plly sub}
if
translate
}
ifelse
mirH? mirV? or
{
ITransBBox
mirH?
{
-1 1 scale
Durx Dllx add neg 0 translate
} if
mirV?
{
1 -1 scale
0 Dury Dlly add neg translate
} if
} if
shrink 0 ne
{
ITransBBox
Dury Dlly sub Pury Plly sub div
Durx Dllx sub Purx Pllx sub div
2 copy gt { exch } if pop
shrink 1 eq
{
Durx Dllx add 2 div Dury Dlly add 2 div translate
dup scale
Purx Pllx add -2 div Pury Plly add -2 div translate
}
{
shrink 2 eq 1 index 1.0 lt and
{
Durx Dllx add 2 div Dury Dlly add 2 div translate
dup scale
Purx Pllx add -2 div Pury Plly add -2 div translate
}
{ pop }
ifelse
}
ifelse
} if
end
} [/autorotate? /shrink? /mirH? /mirV? /angle /Pury /Purx /Plly /Pllx /Durx /Dury /Dllx /Dlly /PW /PHt /DW /DHt
/Devurx /Devury /Devllx /Devlly /pdfHt /pdfW]
bld
/GClipBBox
{
gsave newpath clippath pathbbox newpath grestore
/Dury exch def
/Durx exch def
/Dlly exch def
/Dllx exch def
ITransDBBox
} [/Durx /Dury /Dllx /Dlly]
bld
/GPageBBox
{
{
currentpagedevice /PageSize get aload pop
/Devury exch def /Devurx exch def
/Devllx 0 def /Devlly 0 def
ITransBBox
}
stopped
{ GClipBBox }
if
} [/Devurx /Devury /Devllx /Devlly ]
bld
/ITransDBBox
{
Durx Dury transform matrix defaultmatrix itransform
/Devury exch def
/Devurx exch def
Dllx Dlly transform matrix defaultmatrix itransform
/Devlly exch def
/Devllx exch def
Devury Devlly lt {/Devlly Devury /Devury Devlly def def} if
Devurx Devllx lt {/Devllx Devurx /Devurx Devllx def def} if
} [/Durx /Dury /Dllx /Dlly /Devurx /Devury /Devllx /Devlly ]
bld
/ITransBBox
{
/um matrix currentmatrix matrix defaultmatrix matrix invertmatrix matrix concatmatrix def
Devllx Devlly um itransform
Devurx Devury um itransform
/Dury exch def
/Durx exch def
/Dlly exch def
/Dllx exch def
Dury Dlly lt {/Dlly Dury /Dury Dlly def def} if
Durx Dllx lt {/Dllx Durx /Durx Dllx def def} if
} [ /um /Durx /Dury /Dllx /Dlly /Devurx /Devury /Devllx /Devlly ]
bld
%%EndResource
currentdict readonly pop
end end
/currentpacking where {pop setpacking}if
PDFVars/DocInitAll{[PDF PDFText]{/docinitialize get exec}forall }put
PDFVars/InitAll{[PDF PDFText]{/initialize get exec}forall initgs}put
PDFVars/TermAll{[PDFText PDF]{/terminate get exec}forall}put
PDFVars begin PDF begin
PDFVars/DocInitAll get exec PDFVars/InitAll get exec

[/NamespacePush PDFMark5
[/_objdef {Metadata_In_EPS} /type /stream /OBJ PDFMark5
[{Metadata_In_EPS} 10684 (% &end XMP packet& %) ReadByPDFMark5
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<?adobe-xap-filters esc="CRLF"?>
<x:xmpmeta xmlns:x='adobe:ns:meta/' x:xmptk='XMP toolkit 2.9.1-14, framework 1.6'>
<rdf:RDF xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#' xmlns:iX='http://ns.adobe.com/iX/1.0/'>
<rdf:Description rdf:about='uuid:61896efd-0b3e-4d09-ad34-5dc42b516c88' xmlns:pdf='http://ns.adobe.com/pdf/1.3/' pdf:Producer='Acrobat Distiller 7.0.5 (Windows)'></rdf:Description>
<rdf:Description rdf:about='uuid:61896efd-0b3e-4d09-ad34-5dc42b516c88' xmlns:xap='http://ns.adobe.com/xap/1.0/'
 xmlns:xapGImg='http://ns.adobe.com/xap/1.0/g/img/' xap:CreatorTool='Adobe Illustrator CS2' xap:CreateDate='2007-02-10T19:10:01+01:00' xap:ModifyDate='2007-02-10T19:19:55+01:00' xap:MetadataDate='2007-02-10T19:19:55+01:00'><xap:Thumbnails><rdf:Alt><rdf:li rdf:parseType='Resource'><xapGImg:width>256</xapGImg:width><xapGImg:height>116</xapGImg:height><xapGImg:format>JPEG</xapGImg:format><xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAdAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;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</xapGImg:image></rdf:li></rdf:Alt></xap:Thumbnails></rdf:Description>
<rdf:Description rdf:about='uuid:61896efd-0b3e-4d09-ad34-5dc42b516c88' xmlns:stRef='http://ns.adobe.com/xap/1.0/sType/ResourceRef#'
 xmlns:xapMM='http://ns.adobe.com/xap/1.0/mm/' xapMM:DocumentID='uuid:912334801A4011DB8C30B620AF494ECC' xapMM:InstanceID='uuid:56cf3411-b283-4041-999f-7180bdef922b'><xapMM:DerivedFrom stRef:instanceID='uuid:8090E1D21A3911DB8C30B620AF494ECC' stRef:documentID='uuid:8090E1D11A3911DB8C30B620AF494ECC'/></rdf:Description>
<rdf:Description rdf:about='uuid:61896efd-0b3e-4d09-ad34-5dc42b516c88' xmlns:dc='http://purl.org/dc/elements/1.1/' dc:format='application/pdf'><dc:creator><rdf:Seq><rdf:li>Andreas Jung</rdf:li></rdf:Seq></dc:creator><dc:title><rdf:Alt><rdf:li xml:lang='x-default'>HE_Logo_4c.eps</rdf:li></rdf:Alt></dc:title></rdf:Description>
</rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Metadata_In_EPS} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT PDFMark5
[/Document 1 dict begin /Metadata {Metadata_In_EPS} def currentdict end /BDC PDFMark5
[/NamespacePop PDFMark5

PDFVars/TermAll get exec end end

%%EndSetup
 PDF /docinitialize get exec
PDFVars begin PDF begin PDFVars/InitAll get exec
17 13 126 31 rectclip
/N10 [/CIEBasedABC 20 dict
dup /CreationDate (19980209064900) put
dup /RenderingIntent (RelativeColorimetric) put
dup /Description (sRGB IEC61966-2.1) put
dup /ColorSpace (RGB ) put
dup /Copyright (Copyright (c) 1998 Hewlett-Packard Company) put
dup /ProfileID <1D3FDA2EDB4A89AB60A23C5F7C7D81DD> put
dup /DecodeABC [
{{0 0.00031 0.00061 0.0009 0.0012 0.00151 0.00181 0.00212 0.00242 0.00271
0.00302 0.00334 0.00366 0.00401 0.00437 0.00476 0.00515 0.00558 0.00602 0.00648
0.00696 0.00745 0.00798 0.00852 0.00908 0.00966 0.01027 0.01089 0.01153 0.0122
0.0129 0.01362 0.01435 0.01511 0.01589 0.0167 0.01752 0.01837 0.01925 0.02015
0.02107 0.02203 0.02299 0.02399 0.02501 0.02606 0.02713 0.02822 0.02934 0.03049
0.03166 0.03287 0.03409 0.03533 0.03662 0.03792 0.03925 0.04061 0.04199 0.04341
0.04484 0.04631 0.04781 0.04933 0.05088 0.05245 0.05406 0.05569 0.05736 0.05904
0.06077 0.06252 0.0643 0.06611 0.06794 0.06981 0.0717 0.07363 0.07558 0.07756
0.07959 0.08162 0.0837 0.08581 0.08795 0.09011 0.09231 0.09454 0.0968 0.09909
0.10142 0.10376 0.10616 0.10857 0.11102 0.11351 0.11602 0.11856 0.12114 0.12376
0.12639 0.12907 0.13178 0.13452 0.13729 0.14009 0.14294 0.14581 0.14873 0.15166
0.15463 0.15765 0.16068 0.16376 0.16687 0.17001 0.17319 0.17641 0.17965 0.18293
0.18625 0.1896 0.19299 0.19641 0.19987 0.20335 0.20688 0.21045 0.21405 0.21767
0.22134 0.22505 0.22879 0.23257 0.23638 0.24023 0.24411 0.24804 0.25199 0.25599
0.26002 0.26409 0.2682 0.27234 0.27651 0.28073 0.28499 0.28928 0.29361 0.29798
0.30238 0.30683 0.3113 0.31582 0.32038 0.32497 0.3296 0.33428 0.33898 0.34372
0.34851 0.35333 0.3582 0.3631 0.36804 0.37302 0.37804 0.3831 0.38819 0.39333
0.3985 0.40372 0.40898 0.41427 0.41961 0.42498 0.43039 0.43585 0.44134 0.44688
0.45245 0.45806 0.46372 0.46942 0.47516 0.48094 0.48675 0.49261 0.49851 0.50445
0.51043 0.51646 0.52253 0.52863 0.53477 0.54097 0.54719 0.55347 0.55979 0.56613
0.57253 0.57897 0.58545 0.59198 0.59855 0.60515 0.6118 0.61849 0.62524 0.63201
0.63884 0.6457 0.6526 0.65955 0.66654 0.67357 0.68066 0.68778 0.69495 0.70215
0.7094 0.71669 0.72404 0.73142 0.73885 0.74632 0.75383 0.76138 0.76899 0.77663
0.78433 0.79206 0.79983 0.80765 0.81552 0.82343 0.83139 0.8394 0.84744 0.85554
0.86367 0.87185 0.88007 0.88835 0.89666 0.90503 0.91343 0.92189 0.93038 0.93892
0.94751 0.95614 0.96482 0.97355 0.98232 0.99114 1}
dup 3 -1 roll 0 1 3 copy 3 -1 roll exch ge
{pop pop pop pop pop 256 get}
{pop 3 copy pop le {pop pop pop pop 0 get}
{exch dup 4 -1 roll exch sub 3 1 roll sub div 256 mul dup
floor dup 3 1 roll sub exch cvi dup 1 add 4 -1 roll exch
get 4 -1 roll 3 -1 roll get dup 4 1 roll sub mul add}
ifelse} ifelse
} bind
dup
dup
] put
dup /MatrixABC [
0.2180189128 0.1112492942 0.0069565698
0.1925612492 0.358452993 0.0485281768
0.0715286348 0.0303053423 0.3569742448
] put
dup /MatrixLMN [1.9999694824 0 0 0 1.9999694824 0 0 0 1.9999694824] put
dup /BlackPoint [0 0 0] put
dup /WhitePoint [0.9642028809 1 0.8249053955] put]
/ColorSpace defineRes pop

17.150208 12.798401 125.660797 31.057297 re
W
n
q
n
0.059998 70.866005 155.845001 -70.866005 re
W
n
0.02 setsmoothness
n
0.059998 0.0 155.845001 70.866005 re
[/CIEBasedABC 20 dict
dup /CreationDate (19980209064900) put
dup /RenderingIntent (RelativeColorimetric) put
dup /Description (sRGB IEC61966-2.1) put
dup /ColorSpace (RGB ) put
dup /Copyright (Copyright (c) 1998 Hewlett-Packard Company) put
dup /ProfileID <1D3FDA2EDB4A89AB60A23C5F7C7D81DD> put
dup /DecodeABC [
{{0 0.00031 0.00061 0.0009 0.0012 0.00151 0.00181 0.00212 0.00242 0.00271
0.00302 0.00334 0.00366 0.00401 0.00437 0.00476 0.00515 0.00558 0.00602 0.00648
0.00696 0.00745 0.00798 0.00852 0.00908 0.00966 0.01027 0.01089 0.01153 0.0122
0.0129 0.01362 0.01435 0.01511 0.01589 0.0167 0.01752 0.01837 0.01925 0.02015
0.02107 0.02203 0.02299 0.02399 0.02501 0.02606 0.02713 0.02822 0.02934 0.03049
0.03166 0.03287 0.03409 0.03533 0.03662 0.03792 0.03925 0.04061 0.04199 0.04341
0.04484 0.04631 0.04781 0.04933 0.05088 0.05245 0.05406 0.05569 0.05736 0.05904
0.06077 0.06252 0.0643 0.06611 0.06794 0.06981 0.0717 0.07363 0.07558 0.07756
0.07959 0.08162 0.0837 0.08581 0.08795 0.09011 0.09231 0.09454 0.0968 0.09909
0.10142 0.10376 0.10616 0.10857 0.11102 0.11351 0.11602 0.11856 0.12114 0.12376
0.12639 0.12907 0.13178 0.13452 0.13729 0.14009 0.14294 0.14581 0.14873 0.15166
0.15463 0.15765 0.16068 0.16376 0.16687 0.17001 0.17319 0.17641 0.17965 0.18293
0.18625 0.1896 0.19299 0.19641 0.19987 0.20335 0.20688 0.21045 0.21405 0.21767
0.22134 0.22505 0.22879 0.23257 0.23638 0.24023 0.24411 0.24804 0.25199 0.25599
0.26002 0.26409 0.2682 0.27234 0.27651 0.28073 0.28499 0.28928 0.29361 0.29798
0.30238 0.30683 0.3113 0.31582 0.32038 0.32497 0.3296 0.33428 0.33898 0.34372
0.34851 0.35333 0.3582 0.3631 0.36804 0.37302 0.37804 0.3831 0.38819 0.39333
0.3985 0.40372 0.40898 0.41427 0.41961 0.42498 0.43039 0.43585 0.44134 0.44688
0.45245 0.45806 0.46372 0.46942 0.47516 0.48094 0.48675 0.49261 0.49851 0.50445
0.51043 0.51646 0.52253 0.52863 0.53477 0.54097 0.54719 0.55347 0.55979 0.56613
0.57253 0.57897 0.58545 0.59198 0.59855 0.60515 0.6118 0.61849 0.62524 0.63201
0.63884 0.6457 0.6526 0.65955 0.66654 0.67357 0.68066 0.68778 0.69495 0.70215
0.7094 0.71669 0.72404 0.73142 0.73885 0.74632 0.75383 0.76138 0.76899 0.77663
0.78433 0.79206 0.79983 0.80765 0.81552 0.82343 0.83139 0.8394 0.84744 0.85554
0.86367 0.87185 0.88007 0.88835 0.89666 0.90503 0.91343 0.92189 0.93038 0.93892
0.94751 0.95614 0.96482 0.97355 0.98232 0.99114 1}
dup 3 -1 roll 0 1 3 copy 3 -1 roll exch ge
{pop pop pop pop pop 256 get}
{pop 3 copy pop le {pop pop pop pop 0 get}
{exch dup 4 -1 roll exch sub 3 1 roll sub div 256 mul dup
floor dup 3 1 roll sub exch cvi dup 1 add 4 -1 roll exch
get 4 -1 roll 3 -1 roll get dup 4 1 roll sub mul add}
ifelse} ifelse
} bind
dup
dup
] put
dup /MatrixABC [
0.2180189128 0.1112492942 0.0069565698
0.1925612492 0.358452993 0.0485281768
0.0715286348 0.0303053423 0.3569742448
] put
dup /MatrixLMN [1.9999694824 0 0 0 1.9999694824 0 0 0 1.9999694824] put
dup /BlackPoint [0 0 0] put
dup /WhitePoint [0.9642028809 1 0.8249053955] put]
/E1 exch /ColorSpace defineRes

cs 1.0 1.0 1.0 sc
f
Q
0.02 setsmoothness
n
141.400009 29.859999 m
141.400009 34.155003 l
141.400009 35.259998 140.874008 35.812 139.817001 35.812 c
139.078003 35.812 138.499008 35.498001 137.796005 34.733002 c
137.796005 35.699001 l
136.289993 35.699001 l
136.289993 29.859999 l
137.796005 29.859999 l
137.796005 33.377003 l
137.998001 33.591003 l
138.649994 34.294003 139.091003 34.607002 139.403 34.607002 c
139.768005 34.607002 139.895004 34.344002 139.895004 33.615002 c
139.895004 29.859999 l
141.400009 29.859999 l
h
133.48999 33.489998 m
131.20401 33.489998 l
131.330002 34.281002 131.782013 34.733002 132.448013 34.733002 c
133.149994 34.733002 133.453003 34.382 133.48999 33.489998 c
h
134.996002 30.426001 m
134.444 31.569002 l
133.903 31.23 133.678009 31.117001 133.327011 31.017002 c
133.088013 30.941002 132.861008 30.916002 132.637009 30.916002 c
132.083008 30.916002 131.582001 31.192001 131.330002 31.619001 c
131.19101 31.857002 131.154007 32.059002 131.129013 32.548 c
134.996002 32.548 l
134.996002 33.189003 l
134.996002 34.771 133.991013 35.862003 132.549011 35.862003 c
130.878006 35.862003 129.623001 34.469997 129.623001 32.624001 c
129.623001 30.841002 130.716003 29.697001 132.448013 29.697001 c
133.125 29.697001 133.753006 29.835001 134.369003 30.112001 c
134.507004 30.175001 134.720001 30.275002 134.996002 30.426001 c
h
127.438004 29.145 m
127.438004 28.918001 127.27401 28.654001 126.999008 28.439999 c
126.646004 28.152 126.157005 27.989002 125.704002 27.989002 c
125.015007 27.989002 124.474007 28.279001 124.474007 28.643002 c
124.474007 28.793001 124.574005 29.019001 124.75 29.308001 c
124.78801 29.346001 124.825005 29.421001 124.876007 29.509001 c
126.696007 29.509001 l
127.199005 29.509001 127.438004 29.383001 127.438004 29.145 c
h
126.759003 33.689999 m
126.759003 33.088001 126.332008 32.611 125.792007 32.611 c
125.253006 32.611 124.825005 33.088001 124.825005 33.679001 c
124.825005 34.281002 125.253006 34.783001 125.779999 34.783001 c
126.319008 34.783001 126.759003 34.294003 126.759003 33.689999 c
h
129.057999 34.57 m
129.057999 35.699001 l
127.878006 35.624001 l
127.012009 35.624001 l
126.458008 35.812 126.219994 35.862003 125.792007 35.862003 c
124.249008 35.862003 123.295006 35.009003 123.295006 33.615002 c
123.295006 33.064003 123.469994 32.586002 123.809006 32.185001 c
123.946007 32.021 124.061005 31.933001 124.324005 31.732002 c
124.161003 31.606001 124.034004 31.531002 123.959007 31.469002 c
123.395004 31.092001 123.194008 30.828001 123.194008 30.489002 c
123.194008 30.138 123.433006 29.91 124.011009 29.697001 c
123.332008 29.119001 123.079994 28.731001 123.079994 28.279001 c
123.079994 27.399002 124.047005 26.809002 125.479004 26.809002 c
127.438004 26.809002 128.845001 27.863001 128.845001 29.32 c
128.845001 30.263 128.304001 30.728001 127.161003 30.728001 c
125.115005 30.728001 l
124.825005 30.728001 124.726006 30.766001 124.726006 30.891001 c
124.726006 31.041002 124.91301 31.23 125.303009 31.519001 c
125.491005 31.481001 125.579002 31.481001 125.729004 31.481001 c
127.262009 31.481001 128.291 32.372002 128.291 33.703003 c
128.291 34.079998 128.229004 34.281002 128.028 34.57 c
129.057999 34.57 l
h
121.749008 29.859999 m
121.749008 34.155003 l
121.749008 35.259998 121.222008 35.812 120.167007 35.812 c
119.427002 35.812 118.849007 35.498001 118.146004 34.733002 c
118.146004 35.699001 l
116.639999 35.699001 l
116.639999 29.859999 l
118.146004 29.859999 l
118.146004 33.377003 l
118.347008 33.591003 l
118.999008 34.294003 119.438004 34.607002 119.753006 34.607002 c
120.117004 34.607002 120.242004 34.344002 120.242004 33.615002 c
120.242004 29.859999 l
121.749008 29.859999 l
h
114.755005 29.859999 m
113.262009 29.859999 1.492996 5.8389 re
114.755005 29.859999 m
h
114.856003 37.796001 m
114.856003 38.362003 114.479004 38.814003 114.016006 38.814003 c
113.549995 38.814003 113.161003 38.362003 113.161003 37.796001 c
113.161003 37.231003 113.549995 36.779999 114.016006 36.779999 c
114.479004 36.779999 114.856003 37.231003 114.856003 37.796001 c
h
111.453003 29.859999 m
109.959007 29.859999 1.494003 9.153799 re
111.453003 29.859999 m
h
108.565002 35.297001 m
108.037003 35.599003 107.837006 35.674004 107.284004 35.787003 c
106.919998 35.862003 106.595009 35.899002 106.317001 35.899002 c
104.898003 35.899002 103.944008 35.159 103.944008 34.067001 c
103.944008 33.289001 104.421005 32.736 105.452003 32.348003 c
106.455002 31.958002 l
106.857002 31.808001 107.046005 31.606001 107.046005 31.343002 c
107.046005 31.029001 106.707008 30.841002 106.129005 30.841002 c
105.916008 30.841002 105.703003 30.878002 105.476006 30.953001 c
105.049004 31.092001 104.812004 31.205002 104.221008 31.569002 c
103.744003 30.351002 l
104.384003 30.023001 104.648003 29.923002 105.188004 29.809999 c
105.540001 29.734001 105.854004 29.697001 106.142006 29.697001 c
107.549004 29.697001 108.478004 30.401001 108.478004 31.469002 c
108.478004 31.983002 108.238007 32.511002 107.874008 32.762001 c
107.611008 32.963001 106.769997 33.339001 106.116005 33.565002 c
105.589996 33.754002 105.388008 33.917 105.388008 34.181 c
105.388008 34.507 105.766006 34.733002 106.344002 34.733002 c
106.769997 34.733002 107.271004 34.582001 107.687004 34.331001 c
107.799004 34.269001 107.938004 34.181 108.088005 34.079998 c
108.565002 35.297001 l
h
102.765007 35.297001 m
102.236008 35.599003 102.036003 35.674004 101.483002 35.787003 c
101.119995 35.862003 100.792007 35.899002 100.517006 35.899002 c
99.099007 35.899002 98.143005 35.159 98.143005 34.067001 c
98.143005 33.289001 98.619995 32.736 99.649002 32.348003 c
100.654007 31.958002 l
101.057007 31.808001 101.245003 31.606001 101.245003 31.343002 c
101.245003 31.029001 100.906006 30.841002 100.328003 30.841002 c
100.115005 30.841002 99.902008 30.878002 99.675003 30.953001 c
99.249008 31.092001 99.011002 31.205002 98.419998 31.569002 c
97.942001 30.351002 l
98.583008 30.023001 98.847008 29.923002 99.387001 29.809999 c
99.737007 29.734001 100.053001 29.697001 100.341003 29.697001 c
101.748001 29.697001 102.677002 30.401001 102.677002 31.469002 c
102.677002 31.983002 102.438004 32.511002 102.074005 32.762001 c
101.811005 32.963001 100.969002 33.339001 100.315002 33.565002 c
99.788002 33.754002 99.587006 33.917 99.587006 34.181 c
99.587006 34.507 99.965004 34.733002 100.541008 34.733002 c
100.969002 34.733002 101.471008 34.582001 101.886002 34.331001 c
101.999008 34.269001 102.137001 34.181 102.287003 34.079998 c
102.765007 35.297001 l
h
96.925003 29.859999 m
96.925003 31.205002 l
93.296005 31.205002 l
93.296005 33.415001 l
96.134003 33.415001 l
96.134003 34.758003 l
93.296005 34.758003 l
93.296005 36.804001 l
96.762001 36.804001 l
96.762001 38.148003 l
91.715004 38.148003 l
91.715004 29.859999 l
96.925003 29.859999 l
h
85.599998 33.489998 m
83.313004 33.489998 l
83.439995 34.281002 83.892006 34.733002 84.558006 34.733002 c
85.262001 34.733002 85.561005 34.382 85.599998 33.489998 c
h
87.107002 30.426001 m
86.554001 31.569002 l
86.015007 31.23 85.788002 31.117001 85.437004 31.017002 c
85.198006 30.941002 84.972008 30.916002 84.745003 30.916002 c
84.194 30.916002 83.689995 31.192001 83.439995 31.619001 c
83.303001 31.857002 83.265007 32.059002 83.238007 32.548 c
87.107002 32.548 l
87.107002 33.189003 l
87.107002 34.771 86.103004 35.862003 84.657005 35.862003 c
82.987007 35.862003 81.732002 34.469997 81.732002 32.624001 c
81.732002 30.841002 82.824005 29.697001 84.558006 29.697001 c
85.236008 29.697001 85.863007 29.835001 86.479004 30.112001 c
86.616005 30.175001 86.830002 30.275002 87.107002 30.426001 c
h
80.565002 29.859999 m
79.07 29.859999 1.495102 9.153799 re
80.565002 29.859999 m
h
77.299004 29.859999 m
77.299004 35.699001 l
75.792 35.699001 l
75.792 32.185001 l
75.592003 31.971001 l
74.938004 31.279999 74.499001 30.953001 74.174004 30.953001 c
73.821007 30.953001 73.695 31.23 73.695 31.945002 c
73.695 35.699001 l
72.188004 35.699001 l
72.188004 31.405001 l
72.188004 30.301001 72.716003 29.76 73.771004 29.76 c
74.512001 29.76 75.089996 30.062002 75.792 30.841002 c
75.792 29.859999 l
77.299004 29.859999 l
h
70.382004 29.859999 m
70.382004 34.155003 l
70.382004 35.259998 69.854004 35.812 68.800003 35.812 c
68.058006 35.812 67.481003 35.498001 66.778 34.733002 c
66.778 39.014004 l
65.271004 39.014004 l
65.271004 29.859999 l
66.778 29.859999 l
66.778 33.377003 l
66.979004 33.591003 l
67.632004 34.294003 68.07 34.607002 68.386002 34.607002 c
68.749001 34.607002 68.874001 34.344002 68.874001 33.615002 c
68.874001 29.859999 l
70.382004 29.859999 l
h
64.153 30.263 m
63.603004 31.481001 l
62.961002 31.105001 62.597004 30.979002 62.095001 30.979002 c
61.189999 30.979002 60.563004 31.694002 60.563004 32.736 c
60.563004 33.829002 61.266003 34.607002 62.258003 34.607002 c
62.711002 34.607002 62.999004 34.494003 63.438004 34.155003 c
64.153 35.297001 l
63.665005 35.586002 63.464005 35.674004 63.036003 35.774002 c
62.723003 35.837002 62.408005 35.875 62.082005 35.875 c
60.224003 35.875 58.981003 34.607002 58.981003 32.724003 c
58.981003 30.891001 60.148003 29.697001 61.957005 29.697001 c
62.534004 29.697001 63.124004 29.809999 63.665005 30.036001 c
63.778004 30.087002 63.939999 30.162001 64.153 30.263 c
h
58.103004 35.297001 m
57.574001 35.599003 57.374004 35.674004 56.82 35.787003 c
56.457005 35.862003 56.131004 35.899002 55.854004 35.899002 c
54.436001 35.899002 53.481003 35.159 53.481003 34.067001 c
53.481003 33.289001 53.958004 32.736 54.987003 32.348003 c
55.992004 31.958002 l
56.395004 31.808001 56.582005 31.606001 56.582005 31.343002 c
56.582005 31.029001 56.244003 30.841002 55.666004 30.841002 c
55.453003 30.841002 55.239002 30.878002 55.013004 30.953001 c
54.586002 31.092001 54.348003 31.205002 53.757004 31.569002 c
53.279003 30.351002 l
53.919998 30.023001 54.185001 29.923002 54.725002 29.809999 c
55.076004 29.734001 55.391003 29.697001 55.679001 29.697001 c
57.085003 29.697001 58.015003 30.401001 58.015003 31.469002 c
58.015003 31.983002 57.775002 32.511002 57.411003 32.762001 c
57.148003 32.963001 56.307003 33.339001 55.653004 33.565002 c
55.125004 33.754002 54.925003 33.917 54.925003 34.181 c
54.925003 34.507 55.303001 34.733002 55.879002 34.733002 c
56.307003 34.733002 56.808002 34.582001 57.224003 34.331001 c
57.336002 34.269001 57.474003 34.181 57.624004 34.079998 c
58.103004 35.297001 l
h
51.975002 29.859999 m
51.975002 34.155003 l
51.975002 35.259998 51.447002 35.812 50.392002 35.812 c
49.651001 35.812 49.074001 35.498001 48.369999 34.733002 c
48.369999 39.014004 l
46.863003 39.014004 l
46.863003 29.859999 l
48.369999 29.859999 l
48.369999 33.377003 l
48.571003 33.591003 l
49.225002 34.294003 49.664001 34.607002 49.979004 34.607002 c
50.342003 34.607002 50.468002 34.344002 50.468002 33.615002 c
50.468002 29.859999 l
51.975002 29.859999 l
h
45.746002 30.263 m
45.194 31.481001 l
44.554001 31.105001 44.189003 30.979002 43.687 30.979002 c
42.782001 30.979002 42.155003 31.694002 42.155003 32.736 c
42.155003 33.829002 42.857002 34.607002 43.849998 34.607002 c
44.303001 34.607002 44.591003 34.494003 45.031002 34.155003 c
45.746002 35.297001 l
45.257004 35.586002 45.057003 35.674004 44.629002 35.774002 c
44.315002 35.837002 44.001003 35.875 43.675003 35.875 c
41.816002 35.875 40.573002 34.607002 40.573002 32.724003 c
40.573002 30.891001 41.741001 29.697001 43.549004 29.697001 c
44.127003 29.697001 44.716003 29.809999 45.257004 30.036001 c
45.369999 30.087002 45.532001 30.162001 45.746002 30.263 c
h
38.100002 32.787003 m
38.100002 31.745001 37.471001 30.891001 36.719002 30.891001 c
35.966003 30.891001 35.337002 31.745001 35.337002 32.787003 c
35.337002 33.816002 35.966003 34.669998 36.719002 34.669998 c
37.471001 34.669998 38.100002 33.816002 38.100002 32.787003 c
h
39.657001 32.787003 m
39.657001 34.532001 38.389 35.862003 36.719002 35.862003 c
35.049 35.862003 33.779999 34.532001 33.779999 32.787003 c
33.779999 31.029001 35.049 29.697001 36.719002 29.697001 c
38.389 29.697001 39.657001 31.029001 39.657001 32.787003 c
h
32.537003 29.859999 m
32.537003 38.148003 l
30.954002 38.148003 l
30.954002 34.834003 l
26.698002 34.834003 l
26.698002 38.148003 l
25.116001 38.148003 l
25.116001 29.859999 l
26.698002 29.859999 l
26.698002 33.415001 l
30.954002 33.415001 l
30.954002 29.859999 l
32.537003 29.859999 l
/E1 /ColorSpace findRes cs 0.8549 0.12157 0.23922 sc
f
n
29.729002 18.229 m
29.277002 17.859999 28.715002 17.667002 28.062002 17.667002 c
27.407001 17.667002 26.836 17.859999 26.384001 18.229 c
25.878002 18.644001 25.675001 19.132 25.675001 19.924002 c
25.675001 23.922001 l
26.43 23.922001 l
26.43 20.154001 l
26.43 19.398001 26.486002 19.187 26.779999 18.864 c
27.084002 18.523001 27.527 18.339001 28.052002 18.339001 c
28.577002 18.339001 29.019999 18.523001 29.323002 18.864 c
29.617001 19.187 29.674002 19.398001 29.674002 20.154001 c
29.674002 23.922001 l
30.429001 23.922001 l
30.429001 19.924002 l
30.429001 19.113001 30.235001 18.644001 29.729002 18.229 c
0.42353 0.43137 0.43922 sc
f
n
34.952003 17.842001 m
34.952003 20.799002 l
34.952003 21.075001 34.933002 21.168001 34.887001 21.287001 c
34.823002 21.426001 34.657001 21.509001 34.463001 21.509001 c
34.040001 21.509001 33.588001 21.196001 32.860001 20.394001 c
32.860001 17.842001 l
32.169998 17.842001 l
32.169998 22.015001 l
32.860001 22.015001 l
32.860001 21.139999 l
33.146 21.462002 33.228001 21.545 33.432003 21.711 c
33.745003 21.979 34.158001 22.126001 34.546001 22.126001 c
35.282001 22.126001 35.642002 21.748001 35.642002 20.965 c
35.642002 17.842001 l
34.952003 17.842001 l
f
n
37.291 17.842001 m
37.982002 17.842001 -0.691399 4.1728 re
37.291 17.842001 m
h
37.641003 23.019999 m
37.393002 23.019999 37.189999 23.222002 37.189999 23.471001 c
37.189999 23.719999 37.393002 23.922001 37.641003 23.922001 c
37.891003 23.922001 38.094002 23.719999 38.094002 23.471001 c
38.094002 23.222002 37.891003 23.019999 37.641003 23.019999 c
f
n
41.233002 17.722 m
40.599003 17.722 l
39.032001 22.015001 l
39.787003 22.015001 l
40.939003 18.634001 l
40.957001 18.468 l
40.966003 18.625 l
42.100002 22.015001 l
42.855003 22.015001 l
41.233002 17.722 l
f
n
45.416 21.499001 m
44.836002 21.499001 44.431004 21.149 44.274002 20.504002 c
46.319004 20.504002 l
46.311001 21.149 45.987003 21.499001 45.416 21.499001 c
h
44.219002 19.988001 m
44.219002 18.975 44.735001 18.357 45.582001 18.357 c
45.950001 18.357 46.218002 18.459002 46.669998 18.772001 c
46.945004 18.229 l
46.328003 17.842001 45.979004 17.722 45.436001 17.722 c
44.274002 17.722 43.491001 18.606001 43.491001 19.924002 c
43.491001 21.25 44.274002 22.126001 45.462002 22.126001 c
46.438004 22.126001 47.074001 21.435001 47.074001 20.394001 c
47.074001 19.988001 l
44.219002 19.988001 l
f
n
50.279999 21.26 m
50.142002 21.379002 50.068001 21.426001 49.985001 21.426001 c
49.728001 21.426001 49.396004 21.048 48.999001 20.329 c
48.999001 17.842001 l
48.308002 17.842001 l
48.308002 22.015001 l
48.999001 22.015001 l
48.999001 21.26 l
49.516003 21.923 49.773003 22.126001 50.086002 22.126001 c
50.243004 22.126001 50.437004 22.024 50.619999 21.84 c
50.279999 21.26 l
f
n
52.832001 17.722 m
52.657001 17.722 52.463001 17.74 52.251003 17.777 c
51.855003 17.851002 51.681004 17.915001 51.266003 18.127001 c
51.552002 18.708 l
51.689999 18.634001 51.791004 18.579 51.865002 18.542002 c
52.159004 18.403002 52.528004 18.312 52.823002 18.312 c
53.246002 18.312 53.561001 18.542002 53.561001 18.864 c
53.561001 18.966002 53.523003 19.086 53.478001 19.15 c
53.312004 19.389999 53.117004 19.509001 52.371002 19.814001 c
51.561001 20.154001 51.283001 20.439001 51.283001 20.946001 c
51.283001 21.674002 51.892002 22.126001 52.869003 22.126001 c
53.044003 22.126001 53.229004 22.116001 53.403004 22.079 c
53.716003 22.024 53.863003 21.959999 54.214001 21.767 c
53.873001 21.204 l
53.606003 21.369999 53.486004 21.426001 53.274002 21.481001 c
53.107002 21.526001 52.952003 21.555 52.795002 21.555 c
52.324001 21.555 52.021004 21.343 52.021004 21.029001 c
52.021004 20.928001 52.058002 20.836 52.123001 20.772001 c
52.288002 20.606001 52.398003 20.541 53.153004 20.228001 c
54.039001 19.859001 54.287003 19.574001 54.287003 18.92 c
54.287003 18.174002 53.744003 17.722 52.832001 17.722 c
f
n
55.732002 17.842001 m
56.424004 17.842001 -0.691399 4.1728 re
55.732002 17.842001 m
h
56.083004 23.019999 m
55.835003 23.019999 55.632004 23.222002 55.632004 23.471001 c
55.632004 23.719999 55.835003 23.922001 56.083004 23.922001 c
56.332005 23.922001 56.535004 23.719999 56.535004 23.471001 c
56.535004 23.222002 56.332005 23.019999 56.083004 23.019999 c
f
n
58.958004 17.722 m
58.479004 17.722 58.156002 18.1 58.156002 18.652 c
58.156002 21.435001 l
57.457005 21.435001 l
57.457005 21.84 l
58.156002 22.015001 l
58.156002 23.231001 l
58.847004 23.231001 l
58.847004 22.015001 l
59.953003 22.015001 l
59.953003 21.435001 l
58.847004 21.435001 l
58.847004 19.058001 l
58.856003 18.874001 l
58.865002 18.744001 58.865002 18.662001 58.874004 18.615002 c
58.884003 18.478001 58.967003 18.413 59.115002 18.413 c
59.289997 18.413 59.428001 18.486 59.723003 18.708 c
60.008003 18.247002 l
59.52 17.842001 59.289997 17.722 58.958004 17.722 c
f
n
62.273003 17.611 m
62.079002 17.095001 61.924004 16.754002 61.693005 16.385 c
61.527004 16.118 61.407001 15.943001 61.066002 15.509999 c
60.515003 15.934001 l
60.929005 16.395 61.066002 16.579 61.307003 17.012001 c
61.536003 17.417002 61.647003 17.667002 61.887001 18.303001 c
60.339005 22.015001 l
61.112003 22.015001 l
62.116001 19.463001 l
62.255001 19.058001 l
62.347004 19.463001 l
63.203003 22.015001 l
63.913002 22.015001 l
62.273003 17.611 l
f
n
68.777 21.509001 m
68.041 21.509001 67.470001 20.809002 67.470001 19.924002 c
67.470001 19.039001 68.041 18.339001 68.777 18.339001 c
69.505005 18.339001 70.076004 19.039001 70.076004 19.924002 c
70.076004 20.809002 69.505005 21.509001 68.777 21.509001 c
h
68.777 17.722 m
67.645004 17.722 66.714005 18.727001 66.714005 19.924002 c
66.714005 21.131001 67.645004 22.126001 68.777 22.126001 c
69.901001 22.126001 70.832001 21.131001 70.832001 19.924002 c
70.832001 18.727001 69.901001 17.722 68.777 17.722 c
f
n
74.691002 23.867001 m
74.396004 23.968 74.222 24.005001 74.011002 24.005001 c
73.300003 24.005001 72.949997 23.526001 72.949997 22.531 c
72.949997 22.015001 l
73.936005 22.015001 l
73.936005 21.435001 l
72.949997 21.435001 l
72.949997 17.842001 l
72.260002 17.842001 l
72.260002 21.435001 l
71.559998 21.435001 l
71.559998 21.84 l
72.260002 22.015001 l
72.260002 22.706001 l
72.260002 23.895 72.959999 24.649002 74.057007 24.649002 c
74.406006 24.649002 74.654007 24.595001 74.978004 24.447001 c
74.691002 23.867001 l
f
n
78.993004 23.111002 m
77.998001 20.329 l
79.979004 20.329 l
78.993004 23.111002 l
h
80.845001 17.842001 m
80.217003 19.639002 l
77.758003 19.639002 l
77.132004 17.842001 l
76.32 17.842001 l
78.587006 24.097002 l
79.398003 24.097002 l
81.654007 17.842001 l
80.845001 17.842001 l
f
n
84.574005 21.481001 m
84.325005 21.481001 84.021004 21.369999 83.765007 21.196001 c
83.599007 21.075001 83.505005 20.983002 83.311005 20.734001 c
83.311005 19.288 l
83.311005 18.929001 83.321007 18.883001 83.395004 18.744001 c
83.533005 18.505001 83.811005 18.386002 84.233002 18.386002 c
85.117004 18.386002 85.688004 19.029999 85.688004 20.034 c
85.688004 20.873001 85.220001 21.481001 84.574005 21.481001 c
h
84.308006 17.731001 m
83.865005 17.731001 83.579002 17.814001 83.311005 18.017 c
83.311005 15.639001 l
82.621002 15.639001 l
82.621002 22.015001 l
83.311005 22.015001 l
83.311005 21.49 l
83.662003 21.896002 84.159004 22.135 84.686005 22.135 c
85.716003 22.135 86.436005 21.279001 86.436005 20.044001 c
86.436005 18.698 85.541 17.731001 84.308006 17.731001 c
f
n
89.678001 21.481001 m
89.428001 21.481001 89.124001 21.369999 88.866005 21.196001 c
88.700005 21.075001 88.607002 20.983002 88.415001 20.734001 c
88.415001 19.288 l
88.415001 18.929001 88.424004 18.883001 88.498001 18.744001 c
88.637001 18.505001 88.912003 18.386002 89.336006 18.386002 c
90.220001 18.386002 90.791008 19.029999 90.791008 20.034 c
90.791008 20.873001 90.321007 21.481001 89.678001 21.481001 c
h
89.409004 17.731001 m
88.967003 17.731001 88.683006 17.814001 88.415001 18.017 c
88.415001 15.639001 l
87.724007 15.639001 l
87.724007 22.015001 l
88.415001 22.015001 l
88.415001 21.49 l
88.766006 21.896002 89.262001 22.135 89.787003 22.135 c
90.819008 22.135 91.537003 21.279001 91.537003 20.044001 c
91.537003 18.698 90.645004 17.731001 89.409004 17.731001 c
f
n
92.791008 17.842001 0.691399 6.715799 re
f
n
95.129997 17.842001 m
95.82 17.842001 -0.690399 4.1728 re
95.129997 17.842001 m
h
95.479004 23.019999 m
95.232002 23.019999 95.028008 23.222002 95.028008 23.471001 c
95.028008 23.719999 95.232002 23.922001 95.479004 23.922001 c
95.729004 23.922001 95.933006 23.719999 95.933006 23.471001 c
95.933006 23.222002 95.729004 23.019999 95.479004 23.019999 c
f
n
99.036003 21.499001 m
98.455002 21.499001 98.049995 21.149 97.895004 20.504002 c
99.938004 20.504002 l
99.93 21.149 99.607002 21.499001 99.036003 21.499001 c
h
97.838005 19.988001 m
97.838005 18.975 98.354004 18.357 99.203003 18.357 c
99.57 18.357 99.837006 18.459002 100.290001 18.772001 c
100.565002 18.229 l
99.949005 17.842001 99.599007 17.722 99.055008 17.722 c
97.895004 17.722 97.111008 18.606001 97.111008 19.924002 c
97.111008 21.25 97.895004 22.126001 99.082008 22.126001 c
100.059006 22.126001 100.694008 21.435001 100.694008 20.394001 c
100.694008 19.988001 l
97.838005 19.988001 l
f
n
104.656006 20.559999 m
104.656006 20.882002 104.646004 20.974001 104.573006 21.112001 c
104.453003 21.343 104.158005 21.462002 103.734001 21.462002 c
102.849998 21.462002 102.278008 20.826 102.278008 19.822001 c
102.278008 18.984001 102.749008 18.376001 103.395004 18.376001 c
103.642006 18.376001 103.946007 18.478001 104.204002 18.662001 c
104.361008 18.772001 104.462006 18.874001 104.656006 19.113001 c
104.656006 20.559999 l
h
104.656006 17.842001 m
104.656006 18.367001 l
104.287003 17.952002 103.799004 17.722 103.273003 17.722 c
102.251007 17.722 101.532005 18.579 101.532005 19.814001 c
101.532005 21.158001 102.427002 22.126001 103.661003 22.126001 c
104.104004 22.126001 104.389999 22.043001 104.656006 21.84 c
104.656006 24.558001 l
105.356003 24.558001 l
105.356003 17.842001 l
104.656006 17.842001 l
f
n
112.494003 22.891001 m
112.18 23.074001 112.052002 23.139002 111.857002 23.203001 c
111.628006 23.277 111.259003 23.332001 111.019997 23.332001 c
110.328003 23.332001 109.858002 22.991001 109.858002 22.476002 c
109.858002 22.024 110.126007 21.794001 111.361008 21.139999 c
111.774002 20.919001 112.099007 20.716002 112.319008 20.522001 c
112.613007 20.273001 112.788002 19.859001 112.788002 19.417002 c
112.788002 18.376001 112.016006 17.722 110.790001 17.722 c
110.374008 17.722 109.987007 17.796001 109.666008 17.925001 c
109.436005 18.017 109.278008 18.109001 108.882004 18.376001 c
109.269997 18.975 l
109.609009 18.744001 109.757004 18.662001 109.970001 18.579 c
110.236008 18.478001 110.532005 18.422001 110.845009 18.422001 c
111.563004 18.422001 111.996002 18.763 111.996002 19.344002 c
111.996002 19.519001 111.969002 19.666 111.903008 19.776001 c
111.803009 19.961 111.628006 20.136002 111.388008 20.273001 c
111.286003 20.329 110.945007 20.504002 110.374008 20.817001 c
109.462006 21.306002 109.075005 21.785002 109.075005 22.411001 c
109.075005 23.379002 109.878006 24.023001 111.084007 24.023001 c
111.434006 24.023001 111.794006 23.978001 112.107002 23.876001 c
112.356003 23.793001 112.503006 23.719999 112.845009 23.517 c
112.494003 22.891001 l
f
n
117.137009 18.008001 m
116.795006 17.823 116.391006 17.722 115.976006 17.722 c
114.704002 17.722 113.838005 18.598001 113.838005 19.878 c
113.838005 21.196001 114.741005 22.126001 116.021004 22.126001 c
116.233002 22.126001 116.437004 22.098001 116.639999 22.043001 c
116.916008 21.969002 117.045006 21.904001 117.329002 21.702002 c
116.934006 21.139999 l
116.611008 21.407001 116.371002 21.499001 115.995003 21.499001 c
115.156006 21.499001 114.595009 20.855001 114.595009 19.915001 c
114.595009 18.956001 115.156006 18.357 116.049004 18.357 c
116.454002 18.357 116.712006 18.449999 117.053009 18.708 c
117.412003 18.164001 l
117.294006 18.091002 117.200005 18.035002 117.137009 18.008001 c
f
n
118.427002 17.842001 m
119.116005 17.842001 -0.689003 4.1728 re
118.427002 17.842001 m
h
118.775009 23.019999 m
118.528008 23.019999 118.324005 23.222002 118.324005 23.471001 c
118.324005 23.719999 118.528008 23.922001 118.775009 23.922001 c
119.024002 23.922001 119.229004 23.719999 119.229004 23.471001 c
119.229004 23.222002 119.024002 23.019999 118.775009 23.019999 c
f
n
122.332008 21.499001 m
121.751007 21.499001 121.346008 21.149 121.189995 20.504002 c
123.234009 20.504002 l
123.226006 21.149 122.903008 21.499001 122.332008 21.499001 c
h
121.134003 19.988001 m
121.134003 18.975 121.649994 18.357 122.499008 18.357 c
122.866005 18.357 123.133003 18.459002 123.586006 18.772001 c
123.861008 18.229 l
123.245003 17.842001 122.895004 17.722 122.351006 17.722 c
121.189995 17.722 120.407005 18.606001 120.407005 19.924002 c
120.407005 21.25 121.189995 22.126001 122.378006 22.126001 c
123.354004 22.126001 123.989998 21.435001 123.989998 20.394001 c
123.989998 19.988001 l
121.134003 19.988001 l
f
n
128.007004 17.842001 m
128.007004 20.799002 l
128.007004 21.075001 127.988007 21.168001 127.942009 21.287001 c
127.878006 21.426001 127.712006 21.509001 127.519997 21.509001 c
127.095009 21.509001 126.645004 21.196001 125.916008 20.394001 c
125.916008 17.842001 l
125.225006 17.842001 l
125.225006 22.015001 l
125.916008 22.015001 l
125.916008 21.139999 l
126.202003 21.462002 126.284004 21.545 126.486008 21.711 c
126.800003 21.979 127.215004 22.126001 127.603004 22.126001 c
128.338013 22.126001 128.698013 21.748001 128.698013 20.965 c
128.698013 17.842001 l
128.007004 17.842001 l
f
n
133.248001 18.008001 m
132.907013 17.823 132.501007 17.722 132.087006 17.722 c
130.815002 17.722 129.949005 18.598001 129.949005 19.878 c
129.949005 21.196001 130.854004 22.126001 132.133011 22.126001 c
132.345001 22.126001 132.547012 22.098001 132.75 22.043001 c
133.027008 21.969002 133.154999 21.904001 133.440002 21.702002 c
133.045013 21.139999 l
132.723999 21.407001 132.48201 21.499001 132.106003 21.499001 c
131.267014 21.499001 130.705002 20.855001 130.705002 19.915001 c
130.705002 18.956001 131.267014 18.357 132.161011 18.357 c
132.565002 18.357 132.824005 18.449999 133.165009 18.708 c
133.52301 18.164001 l
133.404007 18.091002 133.312012 18.035002 133.248001 18.008001 c
f
n
136.06601 21.499001 m
135.486008 21.499001 135.080002 21.149 134.924011 20.504002 c
136.970001 20.504002 l
136.961014 21.149 136.638 21.499001 136.06601 21.499001 c
h
134.869003 19.988001 m
134.869003 18.975 135.386002 18.357 136.23201 18.357 c
136.601013 18.357 136.867004 18.459002 137.319 18.772001 c
137.596008 18.229 l
136.979004 17.842001 136.628006 17.722 136.086014 17.722 c
134.924011 17.722 134.141006 18.606001 134.141006 19.924002 c
134.141006 21.25 134.924011 22.126001 136.112 22.126001 c
137.089996 22.126001 137.725006 21.435001 137.725006 20.394001 c
137.725006 19.988001 l
134.869003 19.988001 l
f
n
140.277008 17.722 m
140.103012 17.722 139.907013 17.74 139.695007 17.777 c
139.300003 17.851002 139.125 17.915001 138.711014 18.127001 c
138.996002 18.708 l
139.134003 18.634001 139.236008 18.579 139.309006 18.542002 c
139.604004 18.403002 139.972 18.312 140.267014 18.312 c
140.690002 18.312 141.004013 18.542002 141.004013 18.864 c
141.004013 18.966002 140.96701 19.086 140.921005 19.15 c
140.755005 19.389999 140.562012 19.509001 139.815002 19.814001 c
139.005005 20.154001 138.729004 20.439001 138.729004 20.946001 c
138.729004 21.674002 139.337006 22.126001 140.313004 22.126001 c
140.488007 22.126001 140.672012 22.116001 140.849014 22.079 c
141.161011 22.024 141.308014 21.959999 141.658005 21.767 c
141.317001 21.204 l
141.050003 21.369999 140.932007 21.426001 140.720001 21.481001 c
140.553009 21.526001 140.396011 21.555 140.23999 21.555 c
139.770004 21.555 139.466003 21.343 139.466003 21.029001 c
139.466003 20.928001 139.503006 20.836 139.56601 20.772001 c
139.73201 20.606001 139.844009 20.541 140.599014 20.228001 c
141.483002 19.859001 141.73201 19.574001 141.73201 18.92 c
141.73201 18.174002 141.188004 17.722 140.277008 17.722 c
f
n
22.869999 41.693001 m
19.75 41.693001 l
19.75 15.001 l
22.869999 15.001 l
22.869999 14.174001 l
17.891001 14.174001 l
17.891001 42.52 l
22.869999 42.52 l
22.869999 41.693001 l
true setoverprint
0.13725 0.12157 0.12549 sc
f
n
[/EMC PDFMark5
PDFVars/TermAll get exec end end
%%PageTrailer
%%Trailer
%%EOF
